(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{526:function(s,e,a){"use strict";a.r(e);var n=a(2),t=Object(n.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"treeset的两种排序："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treeset的两种排序："}},[s._v("#")]),s._v(" TreeSet的两种排序：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("int compareTo(T o)\n将此对象与指定的对象进行比较，以返回一个负整数、零或一个正整数，因为这个对象小于、等于或大于指定的对象。\n参数 ： o要比较的对象。\n结果 ： 一个负整数，零，或一个正整数，因为这个对象小于，等于，或大于指定的对象。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"自然排序（comparable）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自然排序（comparable）"}},[s._v("#")]),s._v(" 自然排序（Comparable）")]),s._v(" "),a("ul",[a("li",[s._v("TreeSet拥有的集合元素的compareTo（）方法来比较元素的大小关系，然后将集合元素按照升序排列。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Integer 和 String 对象都可以进行默认的 TreeSet 排序，\n而自定义类的对象是不可以的，自己定义的类必须实现 Comparable 接口，并且覆写相应的 compareTo()函数，才可以正常使用。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("第一种：比较String/Integer")]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(" TreeSet set = new TreeSet();\n        set.add(34);\n        set.add(-34);\n        set.add(43);\n        set.add(11);\n        set.add(8);\n        set.add(34);\n    Iterator iterator = set.iterator();\n\twhile (iterator.hasNext()){\n\t\tSystem.out.println(iterator.next());\n\t}\n\n//这样可以得到排序后的值\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])])]),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("第二种：自定义对象，比较对象的某一属性")]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('1.在这个对象的类中实现Comparable接口,重写接口里面的compareTo()方法\n   public class User implements Comparable<User>{\n    private String name;\n    private Integer age;\n\t//注意这里的构造器，构造器不能省略，因为实例化对象时，要赋值\n\tpublic User(String name, int age) {\n        this.name=name;\n        this.age=age;\n    }\n\t//重写接口里面的compareTo()方法\n    @Override\n    public int compareTo(User o) {\n        if (this.age<o.age){\n            return 1;\n        }\n        if (this.age>o.age){\n            return -1;\n        }\n        return 0;\n    }\n}\n2.比较对象\n  TreeSet set = new TreeSet();\n  set.add(new User("Jim",2));\n  set.add(new User("Mike",65));\n  set.add(new User("Mary",33));\n  set.add(new User("Jack",33));\n  set.add(new User("Jack",56));\n  Iterator iterator = set.iterator();\n  while (iterator.hasNext()){\n\tSystem.out.println(iterator.next());\n  }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br")])])]),a("h2",{attrs:{id:"定制排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定制排序"}},[s._v("#")]),s._v(" 定制排序")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("第三方比较器，比较时需要创建第三方类，实现Comparator接口，并且覆盖其中的compare（）方法，编写比较规则和排序方式。\nint compare(T o1, T o2)\n比较其两个顺序的参数。返回一个负整数、零或一个正整数作为第一个参数小于、等于或大于第二个参数。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("第一种：在排序中创建实例，并重写方法")]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('  Comparator com = new Comparator() {\n            @Override\n            public int compare(Object o1, Object o2) {\n                if(o1 instanceof User && o2 instanceof User){\n                    User u1 = (User)o1;   \n                    User u2 = (User)o2; \n                    return Integer.compare(u1.getAge(),u2.getAge());\n                }else{\n                    throw new RuntimeException("输入的数据类型不匹配");\n                }\n            }\n            @Override\n            public boolean equals(Object obj) {\n                return false;\n            }\n        };\n        TreeSet set = new TreeSet(com);\n        set.add(new User("Tom",12));\n        set.add(new User("Jerry",32));\n        set.add(new User("Jim",2));\n        set.add(new User("Mike",65));\n        set.add(new User("Mary",33));\n        set.add(new User("Jack",33));\n        set.add(new User("Jack",56));\n        Iterator iterator = set.iterator();\n        while(iterator.hasNext()){\n            System.out.println(iterator.next());\n        }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])])]),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("第二种：创建一个工具类（比较器），并重写方法")]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('1.创建一个第三方比较器 AgeSort,实现Comparator接口\npublic class AgeSort  implements Comparator {\n    @Override\n    public int compare(Object o1, Object o2) {\n        if (o1 instanceof User&& o2 instanceof User){\n            User u1=(User) o1;\n            User u2=(User) o2;\n            return Integer.compare(u1.getAge(),u2.getAge());\n        }else{\n            throw new RuntimeException("输入类型不匹配！");\n        }\n    }\n}\n2.引用第三方比较器，比较对象\n TreeSet set = new TreeSet(new AgeSort());\n        set.add(new User("Tom",12));\n        set.add(new User("Jerry",32));\n        set.add(new User("Jim",2));\n        set.add(new User("Mike",65));\n        set.add(new User("Mary",33));\n        set.add(new User("Jack",33));\n        set.add(new User("Jack",56));\n\nIterator iterator = set.iterator();\nwhile(iterator.hasNext()){\n\tSystem.out.println(iterator.next());\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])])]),a("p",[s._v("##总结")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1.当向TreeSet里面添加不是自定义对象时，元素会默认使用自然排序输出从小到大序列。\n2.当向TreeSet里面添加自定义的对象时，可以使用两种方式比较对象。也可以在compareTo()方法中自定义比较规则和排序规则，个人认为使用实现Comparator会更方便。\n  1）自然排序，在对象的类中实现Comparable接口,重写接口里面的compareTo()方法\n  2）定制排序，创建一个第三方比较器,实现Comparator接口，重写compare()方法\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])])}),[],!1,null,null,null);e.default=t.exports}}]);