(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{444:function(t,e,s){"use strict";s.r(e);var n=s(2),a=Object(n.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"多态的实现机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多态的实现机制"}},[t._v("#")]),t._v(" 多态的实现机制")]),t._v(" "),s("ul",[s("li",[t._v("主要依靠 'extend' 关键字实现")]),t._v(" "),s("li",[t._v("extend关键字存在与父子类之间")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("多态实现依靠父类（接口）的引用变量可以指向子类（实现类）的实例对象,\n程序调用的方法在运行期才动态绑定，就是引用变量所指向的具体实例对象的方法，\n也就是内存里正在运行的那个对象的方法，而不是引用变量的类型中定义的方法。\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])])])}),[],!1,null,null,null);e.default=a.exports}}]);