(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{445:function(s,n,a){"use strict";a.r(n);var e=a(2),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"java-的多线程和并发库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-的多线程和并发库"}},[s._v("#")]),s._v(" Java 的多线程和并发库")]),s._v(" "),a("h3",{attrs:{id:"多线程基础知识‐‐传统线程机制的回顾"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多线程基础知识‐‐传统线程机制的回顾"}},[s._v("#")]),s._v(" 多线程基础知识‐‐传统线程机制的回顾")]),s._v(" "),a("h4",{attrs:{id:"传统使用类-thread-和接口-runnable-实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#传统使用类-thread-和接口-runnable-实现"}},[s._v("#")]),s._v(" 传统使用类 Thread 和接口 Runnable 实现")]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("在 Thread 子类覆盖的 run 方法中编写运行代码")]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("new Thread(){\n  @Override public void\n\trun(){ while( true){\n\ttry{\n\t\tThread.sleep(200 0);\n\t} catch (InterruptedException e){\n\t\te.printStackTrace();\n\t}\n  }\n }\n}.start();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])])]),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("2.在传递给 Thread 对象的 Runnable 对象的 run 方法中编写代码")]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("new Thread(new Runnable(){ public void run(){\nwhile(true){\ntry { \n\tThread.sleep(2000);\n} catch (InterruptedException e){\n\te.printStackTrace();\n}\nSystem.out.println(Thread.currentThread().getName());\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])])]),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("总结")]),a("p",[s._v("查看 Thread 类的 run()方法的源代码，可以看到其实这两种方式都是在调用 Thread 对象的 run 方法，\n如果 Thread 类的 run 方法没有被覆盖，并且为该 Thread 对象设置了一个 Runnable 对象，\n该 run 方法会调用 Runnable 对象的 run 方法")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/**\n*If this thread was constructed using a separate\n*<code>Runnable</code> run object, then that\n*<code>Runnable</code> object's <code>run</code> method is called;\n*otherwise, this method does nothing and returns.\n* <p>\n*Subclasses of <code>Thread</code> should override this method.\n*\n*@see\t#start()\n*@see\t#stop()\n*@see\t#Thread(ThreadGroup, Runnable, String)\n*/ @Override\npublic void run() {\nif (target != null){\n\ttarget.run();\n   }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])])]),a("h4",{attrs:{id:"定实现时器-timer-和-timertask"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定实现时器-timer-和-timertask"}},[s._v("#")]),s._v(" 定实现时器 Timer 和 TimerTask")]),s._v(" "),a("ul",[a("li",[s._v("Timer 在实际开发中应用场景不多，一般来说都会用其他第三方库来实现。但有时会在一些面试题中出现。下面我们就针对一道面试题来使用 Timer 定时类。")])]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("请模拟写出双重定时器（面试题）")]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('\n要求：使用定时器,间隔 4 秒执行一次，再间隔 2 秒执行一次，以此类推执行。\n\nclass TimerTastCus extends TimerTask{ @Override\npublic void run()\n{ count = (count\n+1)%2;\nSystem.err.println("Boob boom ");\nnew Timer().schedule(new TimerTastCus(), 2000+2000*count);\n}\n}\n\n\nTimer timer = new Timer();\ntimer.schedule(new TimerTastCus(), 2000+2000*count);\n\n\nwhile (true) {\nSystem.out.println(new Date().getSeconds()); try {\nThread.sleep(1000);\n} catch (InterruptedException e) {\n// TODO Auto-generated catch block e.printStackTrace();\n}\n}\n//PS：下面的代码中的 count 变量中\n//此参数要使用在你匿名内部类中，使用 final 修饰就无法对其值进行修改，\n//只能改为静态变量\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])])])])}),[],!1,null,null,null);n.default=t.exports}}]);