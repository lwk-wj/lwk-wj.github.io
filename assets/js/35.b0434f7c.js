(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{448:function(t,s,e){"use strict";e.r(s);var r=e(2),a=Object(r.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"java-的基本数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-的基本数据类型"}},[t._v("#")]),t._v(" Java 的基本数据类型")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("四类")]),t._v(" "),e("th",[t._v("八种")]),t._v(" "),e("th",[t._v("字节数")]),t._v(" "),e("th",[t._v("数据表示范围")])])]),t._v(" "),e("tbody",[e("tr",[e("td"),t._v(" "),e("td",[t._v("byte")]),t._v(" "),e("td",[t._v("1")]),t._v(" "),e("td",[t._v("-128～127")])]),t._v(" "),e("tr",[e("td",[t._v("整型")]),t._v(" "),e("td",[t._v("short")]),t._v(" "),e("td",[t._v("2")]),t._v(" "),e("td",[t._v("-32768～32767")])]),t._v(" "),e("tr",[e("td"),t._v(" "),e("td",[t._v("int")]),t._v(" "),e("td",[t._v("4")]),t._v(" "),e("td",[t._v("-2147483648～2147483647")])]),t._v(" "),e("tr",[e("td"),t._v(" "),e("td",[t._v("long")]),t._v(" "),e("td",[t._v("8")]),t._v(" "),e("td",[t._v("-2^63～2^63-1")])]),t._v(" "),e("tr",[e("td",[t._v("浮点型")]),t._v(" "),e("td",[t._v("float")]),t._v(" "),e("td",[t._v("4")]),t._v(" "),e("td",[t._v("-3.403E38～3.403E38")])]),t._v(" "),e("tr",[e("td"),t._v(" "),e("td",[t._v("double")]),t._v(" "),e("td",[t._v("8")]),t._v(" "),e("td",[t._v("-1.798E308～1.798E308")])]),t._v(" "),e("tr",[e("td",[t._v("字符型")]),t._v(" "),e("td",[t._v("char")]),t._v(" "),e("td",[t._v("2")]),t._v(" "),e("td",[t._v("表示一个字符，如('a'，'A'，'0'，'家')")])]),t._v(" "),e("tr",[e("td",[t._v("布尔型")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("1")]),t._v(" "),e("td",[t._v("只有两个值 true 与 false")])])])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("String 是基本数据类型吗？")]),e("p",[t._v("String 是引用类型，底层用 char 数组实现的。")])]),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("short s1 = 1; s1 = s1 + 1; 有错吗?short s1 = 1; s1 += 1 有错吗;")]),e("p",[t._v("前者不正确，后者正确。\n对于 short s1 = 1; s1 = s1 + 1;由于 1 是 int 类型，因此 s1+1 运算结果也是 int 型，\n需要强制转换类型才能赋值给 short 型。\n而 short s1 = 1; s1 += 1;可以正确编译，因为 s1+= 1;相当于 s1 = (short)(s1 + 1);\n其中有隐含的强制类型转换。")])]),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("int 和 和 Integer 有什么区别？")]),e("p",[t._v("Java 是一个近乎纯洁的面向对象编程语言，但是为了编程的方便还是引入了基本数据类型，\n为了能够将这些基本数据类型当成对象操作，Java 为每一个基本数据类型都引入了对应的包装类型（wrapper class），\nint 的包装类就是Integer，从 Java 5 开始引入了自动装箱/拆箱机制，使得二者可以相互转换。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Java 为每个原始类型提供了包装类型：\n-原始类型: boolean，char，byte，short，int，long，float，double\n-包装类型：Boolean，Character，Byte，Short，Integer，Long，Float，Double\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[e("img",{attrs:{src:"https://gitee.com/li-wen-kai/picgo/raw/master/img/image-20210601092347367.png",alt:"image-20210601092347367"}})])]),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("例题")]),e("p",[e("img",{attrs:{src:"https://gitee.com/li-wen-kai/picgo/raw/master/img/image-20210601092613737.png",alt:"image-20210601092613737"}})]),t._v(" "),e("p",[e("strong",[t._v("如果不明就里很容易认为两个输出要么都是 true 要么都是 false。")]),t._v(" "),e("strong",[t._v("首先需要注意的是 f1、f2、f3、f4 四个变量都是 Integer 对象引用，所以下面的==运算比较的不是值而是引用。")]),t._v(" "),e("strong",[t._v("装箱的本质是什么呢？当我们给一个 Integer 对象赋一个 int 值的时候，会调用 Integer 类的静态方法 valueOf，")]),t._v(" "),e("strong",[t._v("如果看看 valueOf 的源代码就知道发生了什么。")]),e("br"),t._v("\n源码：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/li-wen-kai/picgo/raw/master/img/image-20210601092757162.png",alt:"image-20210601092757162"}})]),t._v(" "),e("p",[t._v("IntegerCache 是 Integer 的内部类，其代码如下所示：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/li-wen-kai/picgo/raw/master/img/image-20210601092838378.png",alt:"image-20210601092838378"}})]),t._v(" "),e("p",[t._v("简单的说，如果整型字面量的值在-128 到 127 之间，那么不会 new 新的 Integer 对象，而是直接引用常量池\n中的 Integer 对象，所以上面的面试题中 f1==f2 的结果是 true，而 f3==f4 的结果是 false。")]),t._v(" "),e("ul",[e("li",[t._v("越是貌似简单的面试题其中的玄机就越多，需要面试者有相当深厚的功力。")])])]),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("String常用方法")]),e("table",[e("thead",[e("tr",[e("th",[t._v("方法")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("int   length（）")]),t._v(" "),e("td",[t._v("返回当前字符串的长度")])]),t._v(" "),e("tr",[e("td",[t._v("int indexOf (int ch)")]),t._v(" "),e("td",[t._v("查找ch字符在该字符串中第一次出现的位置")])]),t._v(" "),e("tr",[e("td",[t._v("int indexOf (String str)")]),t._v(" "),e("td",[t._v("查找str子字符串在该字符串中第一次出现的位置")])]),t._v(" "),e("tr",[e("td",[t._v("int lastIndexOf (int ch)")]),t._v(" "),e("td",[t._v("查找ch字符在该字符串中最后一次出现的位置")])]),t._v(" "),e("tr",[e("td",[t._v("int lastIndexOf (String str)")]),t._v(" "),e("td",[t._v("查找str子字符串在该字符串中最后一次出现的位置")])]),t._v(" "),e("tr",[e("td",[t._v("String  substring (int beginIndex)")]),t._v(" "),e("td",[t._v("得到从beginIndex位置开始到结束的子字符串")])]),t._v(" "),e("tr",[e("td",[t._v("String  substring (int beginIndex，int endIndex)")]),t._v(" "),e("td",[t._v("得到从beginIndex位置开始到endIndex的子字符串")])]),t._v(" "),e("tr",[e("td",[t._v("String trim ()")]),t._v(" "),e("td",[t._v("返回去除了前后空格的字符串")])]),t._v(" "),e("tr",[e("td",[t._v("boolean equals (Object obj)")]),t._v(" "),e("td",[t._v("比较对象，返回true或false")])]),t._v(" "),e("tr",[e("td",[t._v("String toLowerCase（）")]),t._v(" "),e("td",[t._v("将字符串中所有的大写改变成小写")])]),t._v(" "),e("tr",[e("td",[t._v("String toUpperCase（）")]),t._v(" "),e("td",[t._v("将字符串中所有的小写改变为大写")])]),t._v(" "),e("tr",[e("td",[t._v("char charAt（int index）")]),t._v(" "),e("td",[t._v("获取一个字符串中某个位置的字符")])]),t._v(" "),e("tr",[e("td",[t._v("String[ ]  split（String regex, int limit）")]),t._v(" "),e("td",[t._v("将字符串分割为子字符串，返回字符串数组")])]),t._v(" "),e("tr",[e("td",[t._v("byte[ ] getBytes( )")]),t._v(" "),e("td",[t._v("将该字符串转换为byte数组")])])])])]),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("String、StringBuffer、StringBuilder 的区别？")]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("（1）可变不可变\nString：字符串常量，在修改时不会改变自身；若修改，等于重新生成新的字符串对象。\nStringBuffer：在修改时会改变对象自身，每次操作都是对 StringBuffer 对象本身进行修改，不是生成新的对象；\n使用场景：对字符串经常改变情况下，主要方法：append（），insert（）等。\n（2）线程是否安全\nString：对象定义后不可变，线程安全。 \nStringBuffer：是线程安全的（对调用方法加入同步锁），执行效率较慢，\n适用于多线程下操作字符串缓冲区大量数据。\nStringBuilder：是线程不安全的，适用于单线程下操作字符串缓冲区大量数据。\n（3）共同点\nStringBuilder 与 StringBuffer 有公共父类 AbstractStringBuilder(抽象类)。\nStringBuilder、StringBuffer 的方法都会调用 AbstractStringBuilder 中的公共方法，如 super.append(...)。\n只是 StringBuffer 会在方法上加 synchronized 关键字，进行同步。\n最后，如果程序不是多线程的，那么使用StringBuilder 效率高于 StringBuffer。\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br")])])]),e("h2",{attrs:{id:"数据类型之间的转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据类型之间的转换"}},[t._v("#")]),t._v(" 数据类型之间的转换")]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("字符串如何转基本数据类型？")]),e("p",[t._v("调用基本数据类型对应的包装类中的方法 parseXXX(String)或 valueOf(String)即可返回相应基本类型。")])]),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("基本数据类型如何转字符串？")]),e("p",[t._v("一种方法是将基本数据类型与空字符串（“”）连接（+）即可获得其所对应的字符串；\n另一种方法是调用 String类中的 valueOf()方法返回相应字符串。")])])])}),[],!1,null,null,null);s.default=a.exports}}]);