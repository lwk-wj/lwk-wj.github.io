(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{454:function(n,s,a){"use strict";a.r(s);var t=a(2),e=Object(t.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"http的长连接和短连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http的长连接和短连接"}},[n._v("#")]),n._v(" http的长连接和短连接")]),n._v(" "),a("ul",[a("li",[n._v("HTTP 协议有 HTTP/1.0 版本和 HTTP/1.1 版本。")]),n._v(" "),a("li",[n._v("HTTP1.1 默认保持长连接（HTTP persistent connection，也翻译为持久连接），数据传输完成了保持 TCP 连接不断开（不发 RST 包、不四次握手），等待在同域名下继续用这个通道传输数据；相反的就是短连接。")]),n._v(" "),a("li",[n._v("在 HTTP/1.0 中，默认使用的是短连接。也就是说，浏览器和服务器每进行一次 HTTP 操作，就建立一次连接，任务结束就中断连接。")]),n._v(" "),a("li",[n._v("从 HTTP/1.1 起，默认使用的是长连接，用以保持连接特性。")])]),n._v(" "),a("h2",{attrs:{id:"http-1-1-与-http-1-0-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1-与-http-1-0-的区别"}},[n._v("#")]),n._v(" HTTP/1.1 与 HTTP/1.0 的区别")]),n._v(" "),a("ul",[a("li",[n._v("参考原文：http://blog.csdn.net/forgotaboutgirl/article/details/6936982")])]),n._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[n._v("可扩展性\na)HTTP/1.1 在消息中增加版本号，用于兼容性判断。\nb)HTTP/1.1 增加了 OPTIONS 方法，它允许客户端获取一个服务器支持的方法列表。\nc)为了与未来的协议规范兼容，HTTP/1.1 在请求消息中包含了 Upgrade 头域，通过该头域，客户端可以让服务器知道它能够支持的其它备用通信协议，服务器可以据此进行协议切换，使用备用协议与客户端进行通信。\n\n缓存\n在 HTTP/1.0 中，使用 Expire 头域来判断资源的 fresh 或 stale，并使用条件请求（conditional request）来判断资源是否仍有效。\nHTTP/1.1 在 1.0 的基础上加入了一些 cache 的新特性，当缓存对象的 Age 超过 Expire 时变为stale 对象，cache 不需要直接抛弃 stale 对象，而是与源服务器进行重新激活（revalidation）。\n\n带宽优化\nHTTP/1.0 中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了。\n例如，客户端只需要显示一个文档的部分内容，又比如下载大文件时需要支持断点续传功能，而不是在发生断连后不得不重新下载完整的包。\nHTTP/1.1 中在请求消息中引入了 range 头域，它允许只请求资源的某个部分。\n在响应消息中 Content-Range 头域声明了返回的这部分对象的偏移值和长度。\n如果服务器相应地返回了对象所请求范围的内容，则响应码为 206（Partial Content），它可以防止 Cache 将响应误以为是完整的一个对象。 \n另外一种情况是请求消息中如果包含比较大的实体内容，但不确定服务器是否能够接收该请求（如是否有权限），此时若贸然发出带实体的请求，如果被拒绝也会浪费带宽。\nHTTP/1.1 加入了一个新的状态码 100（Continue）。\n客户端事先发送一个只带头域的请求，如果服务器因为权限拒绝了请求，就回送响应码 401（Unauthorized）；如果服务器接收此请求就回送响应码 100，客户端就可以继续发送带实体的完整请求了。\n注意，HTTP/1.0 的客户端不支持 100 响应码。但可以让客户端在请求消息中加入 Expect 头域，并将它的值设置为 100-continue。\n节省带宽资源的一个非常有效的做法就是压缩要传送的数据。\nContent-Encoding 是对消息进行端到端（end-to- end）的编码，它可能是资源在服务器上保存的固有格式（如 jpeg 图片格式）；\n在请求消息中加入 Accept-Encoding 头域，它可以告诉服务器客户端能够解码的编码方式。\n\n长连接\nHTTP/1.0 规定浏览器与服务器只保持短暂的连接，浏览器的每次请求都需要与服务器建立一个 TCP 连接，服务器完成请求处理后立即断开 TCP 连接，服务器不跟踪每个客户也不记录过去的请求。\n此外，由于大多数网页的流量都比较小，一次 TCP 连接很少能通过 slow-start 区，不利于提高带宽利用率。\nHTTP 1.1 支持长连接（PersistentConnection）和请求的流水线（Pipelining）处理，在一个 TCP 连接上可以传送多个 HTTP 请求和响应，减少了建立和关闭连接的消耗和延迟。\n例如：一个包含有许多图像的网页文件的多个请求和应答可以在一个连接中传输，但每个单独的网页文件的请求和应答仍然需要使用各自的连接。\nHTTP 1.1 还允许客户端不用等待上一次请求结果返回，就可以发出下一次请求，但服务器端必须按照接收到客户端请求的先后顺序依次回送响应结果，以保证客户端能够区分出每次请求的响应内容，这样也显著地减少了整个下载过程所需要的时间。\n\n消息传递\nHTTP 消息中可以包含任意长度的实体，通常它们使用 Content-Length 来给出消息结束标志。\n但是，对于很多动态产生的响应，只能通过缓冲完整的消息来判断消息的大小，但这样做会加大延迟。\n如果不使用长连接，还可以通过连接关闭的信号来判定一个消息的结束。\nHTTP/1.1 中引入了 Chunkedtransfer-coding 来解决上面这个问题，发送方将消息分割成若干个任意大小的数据块，每个数据块在发送时都会附上块的长度，最后用一个零长度的块作为消息结束的标志。\n这种方法允许发送方只缓冲消息的一个片段，避免缓冲整个消息带来的过载。\n在 HTTP/1.0 中，有一个 Content-MD5 的头域，要计算这个头域需要发送方缓冲完整个消息后才能进行。\n而HTTP/1.1 中，采用 chunked 分块传递的消息在最后一个块（零长度）结束之后会再传递一个拖尾（trailer），它包含一个或多个头域，这些头域是发送方在传递完所有块之后再计算出值的。发送方会在消息中包含一个 Trailer 头域告诉接收方这个拖尾的存在。\n\nHost 头域\n在 HTTP1.0 中认为每台服务器都绑定一个唯一的 IP 地址，因此，请求消息中的 URL 并没有传递主机名（hostname）。\n但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个 IP 地址。\nHTTP1.1 的请求消息和响应消息都应支持 Host 头域，且请求消息中如果没有 Host 头域会报告一个错误（400 Bad Request）。\n此外，服务器应该接受以绝对路径标记的资源请求。\n\n错误提示\nHTTP/1.0 中只定义了 16 个状态响应码，对错误或警告的提示不够具体。\nHTTP/1.1 引入了一个 Warning 头域， 增加对错误或警告信息的描述。\n此外，在 HTTP/1.1 中新增了 24 个状态响应码，如 409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br")])]),a("h2",{attrs:{id:"http-常见的状态码有哪些？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-常见的状态码有哪些？"}},[n._v("#")]),n._v(" http 常见的状态码有哪些？")]),n._v(" "),a("ul",[a("li",[n._v("200 OK\t//客户端请求成功")]),n._v(" "),a("li",[n._v("301Moved Permanently（永久移除)，请求的 URL 已移走。Response 中应该包含一个 Location URL, 说明资源现在所处的位置")]),n._v(" "),a("li",[n._v("302found 重定向")]),n._v(" "),a("li",[n._v("400Bad Request //客户端请求有语法错误，不能被服务器所理解")]),n._v(" "),a("li",[n._v("401Unauthorized //请求未经授权，这个状态代码必须和 WWW-Authenticate 报头域一起使用403 Forbidden //服务器收到请求，但是拒绝提供服务")]),n._v(" "),a("li",[n._v("404 Not Found //请求资源不存在，eg：输入了错误的 URL 500 Internal Server Error //服务器发生不可预期的错误")]),n._v(" "),a("li",[n._v("503 Server Unavailable //服务器当前不能处理客户端的请求，一段时间后可能恢复正常")])]),n._v(" "),a("h2",{attrs:{id:"get-和-post-的区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-和-post-的区别？"}},[n._v("#")]),n._v(" GET 和 POST 的区别？")]),n._v(" "),a("ul",[a("li",[n._v("从表面现像上面看 GET 和 POST 的区别：")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('1.GET 请求的数据会附在 URL 之后（就是把数据放置在 HTTP 协议头中），以?分割 URL 和传输数据，参数之间以&相连，\n如：login.action?name=zhagnsan&password=123456。POST 把提交的数据则放置在是 HTTP 包的包体中。\n2.GET 方式提交的数据最多只能是 1024 字节，理论上 POST 没有限制，可传较大量的数据。\n其实这样说是错误的，不准确的：“GET 方式提交的数据最多只能是 1024 字节"，因为 GET 是通过 URL 提交数据，那么 GET 可提交的数据量就跟URL 的长度有直接关系了。而实际上，URL 不存在参数上限的问题，HTTP 协议规范没有对 URL 长度进行限制。这个\n限制是特定的浏览器及服务器对它的限制。IE 对 URL 长度的限制是 2083 字节(2K+35)。\n对于其他浏览器，如 Netscape、FireFox 等，理论上没有长度限制，其限制取决于操作系统的支持。\n3.POST 的安全性要比 GET 的安全性高。注意：这里所说的安全性和上面 GET 提到的“安全”不是同个概念。\n上面“安全”的含义仅仅是不作数据修改，而这里安全的含义是真正的 Security 的含义，比如：通过 GET 提交数据，用 户名和密码将明文出现在 URL 上，因为(1)登录页面有可能被浏览器缓存，(2)其他人查看浏览器的历史纪录，那么别 人就可以拿到你的账号和密码了，除此之外，使用 GET 提交数据还可能会造成 Cross-site request forgery 攻击。\nGet 是向服务器发索取数据的一种请求，而 Post 是向服务器提交数据的一种请求，在 FORM（表单）中，Method\n默认为"GET",实质上，GET和POST只是发送机制不同，并不是一个取一个发！\n\n参考原文： https://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br")])]),a("h2",{attrs:{id:"http-中重定向和请求转发的区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-中重定向和请求转发的区别？"}},[n._v("#")]),n._v(" http 中重定向和请求转发的区别？")]),n._v(" "),a("ul",[a("li",[n._v("本质区别：")]),n._v(" "),a("li",[n._v("转发是服务器行为，重定向是客户端行为。")]),n._v(" "),a("li",[n._v("重定向特点：两次请求，浏览器地址发生变化，可以访问自己 web 之外的资源，传输的数据会丢失。")]),n._v(" "),a("li",[n._v("请求转发特点：一次强求，浏览器地址不变，访问的是自己本身的web 资源，传输的数据不会丢失。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);