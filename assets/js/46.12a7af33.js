(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{459:function(s,e,n){"use strict";n.r(e);var t=n(2),a=Object(t.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[s._v("#HashMap的底层是什么结构？")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('哈希表结构(链表散列:数组+链表)实现,结合数组和链表的优点。当链表长度超过8时,链表转换为红黑树。\n转红黑树的两个条件：一个是链表长度到8,一个是数组长度到64.\n底层原理：\nHashMap是一个用于存储key-value键值对的集合，每一个键值对也叫做entry,这些entry分散存储在一个数组当中，这个数组就是HashMap的主干。\nHashMap数组的每一个元素的初始值都是null.\n\nHashMap常用的两个方法：GET和PUT\n1.PUT方法原理\n举例说明：\n调用hashMap.put("apple", 0) ，插入一个Key为“apple"的元素。\n这时候我们需要利用一个哈希函数来确定Entry的插入位置（index）：index=  Hash（“apple”）\n假定最后计算出的index是2，那么结果如下：\n数组下标为2的地方，插入了这个apple对象\n...\n加入链表的原因：\n因为HashMap的长度是有限的，当插入的Entry越来越多时，(有固定的长度，会有不同值的HashCode是一样的，会插入到同一个位置)再完美的Hash函数也难免会出现index冲突的情况。比如下面这样：\n这时候该怎么办呢？我们可以利用链表来解决。\nHashMap数组的每一个元素不止是一个Entry对象，也是一个链表的头节点。\n每一个Entry对象通过Next指针指向它的下一个Entry节点。\n当新来的Entry映射到冲突的数组位置时，只需要插入到对应的链表即可：\nJDK1.8之前使用的是头插法\nJDK1.8之后使用的是尾插法\n\n2.GET方法原理：\n使用Get方法根据Key来查找Value的时候，发生了什么呢？\n首先会把输入的Key做一次Hash映射，得到对应的index：index=  Hash（“apple”）\n(在同一个index的地方可能会有多个entry)由于刚才所说的Hash冲突，同一个位置有可能匹配到多个Entry，\n这时候就需要顺着对应链表的头节点，一个一个向下来查找。假设我们要查找的Key是“apple”：\n假设在apple之后又在index=2的位置插入了一个entry6,banana,我们先查找index=2的位置，key值不是apple,接着我们查看下一个链表的key，发现是apple\n之所以采用头插法，是因为HashMap的发明者认为，后插入的Entry被查找的可能性更大。这就是HashMap的底层原理。\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br")])]),n("h2",{attrs:{id:"hashmap的默认长度是多少？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hashmap的默认长度是多少？"}},[s._v("#")]),s._v(" HashMap的默认长度是多少？")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("HashMap的默认初始长度是16，并且每次自动扩展或是手动初始化时，长度必须是2的幂。\n之所以选择16，是为了服务于从Key映射到index的Hash算法。\n从Key映射到HashMap数组的对应位置，会用到一个Hash函数：index=  Hash（“apple”）\n如何实现一个尽量均匀分布的Hash函数呢？我们通过利用Key的HashCode值来做某种运算。\n为了实现高效的Hash算法，HashMap的发明者采用了位运算的方式。\n有如下的公式（Length是HashMap的长度）：\nindex=  HashCode（Key） &  （Length - 1） \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h2",{attrs:{id:"高并发情况下，为什么hashmap可能会出现死锁？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#高并发情况下，为什么hashmap可能会出现死锁？"}},[s._v("#")]),s._v(" 高并发情况下，为什么HashMap可能会出现死锁？")]),s._v(" "),n("h2",{attrs:{id:"在java8当中，hashmap的结构有什么样的优化？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在java8当中，hashmap的结构有什么样的优化？"}},[s._v("#")]),s._v(" 在Java8当中，HashMap的结构有什么样的优化？")]),s._v(" "),n("ul",[n("li",[s._v("详细讲解：https://blog.csdn.net/wufaliang003/article/details/79997585")])]),s._v(" "),n("h2",{attrs:{id:"当两个对象的hashcode相等时会怎么样？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#当两个对象的hashcode相等时会怎么样？"}},[s._v("#")]),s._v(" 当两个对象的hashCode相等时会怎么样？")]),s._v(" "),n("p",[s._v("会产生哈希碰撞，若key值相同则替换旧值，不然链接到链表后面，链表长度超过阙值8就转为红黑树存储")]),s._v(" "),n("ul",[n("li",[s._v("HashMap的相关问题：")]),s._v(" "),n("li",[n("a",{attrs:{href:"https://www.cnblogs.com/zengcongcong/p/11295349.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("1"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://blog.csdn.net/QGhurt/article/details/107323702",target:"_blank",rel:"noopener noreferrer"}},[s._v("2"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://blog.csdn.net/wufaliang003/article/details/79997585",target:"_blank",rel:"noopener noreferrer"}},[s._v("3"),n("OutboundLink")],1)])]),s._v(" "),n("p",[s._v("#Servlet是什么？servlet的生命周期了解过没？")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Servlet 是运行在 Web服务器或应用服务器上的程序，\n它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。\n使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h2",{attrs:{id:"servlet的生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#servlet的生命周期"}},[s._v("#")]),s._v(" Servlet的生命周期")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://www.runoob.com/servlet/servlet-life-cycle.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("生命周期"),n("OutboundLink")],1),s._v("\n加载类——>实例化（为对象分配空间）——>初始化(为对象的属性赋值)——>请求处理（服务阶段）——>销毁")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("https://blog.csdn.net/zhouym_/article/details/90741337\nServlet的生命周期分为：加载阶段、实例化阶段、初始化阶段、服务阶段、销毁阶段。\n上面我们说了servlet默认是第一次被访问的时候初始化的，这种情况当用户要使用的时候才创建，\n也可以在服务器一启动的时候就创建好servlet(这种方式一般不用)，要实现这样的操作需要进行配置，在web.xml中进行配置\nload-on-startup=1，默认为0\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1.实例化（使用构造方法创建对象）\n2.初始化  初始化后调用 init () 方法。\n3.服务    （响应客户请求阶段）调用 service() 方法来处理客户端的请求。\t\n4.销毁    销毁前调用 destroy() 方法，Servlet对象被标记为垃圾回收，是由 JVM 的垃圾回收器进行垃圾回收的\n\n\n第一个到达服务器的 HTTP 请求被委派到 Servlet 容器。\nServlet 容器在调用 service() 方法之前加载 Servlet。\n然后 Servlet 容器处理由多个线程产生的多个请求，每个线程执行一个单一的 Servlet 实例的 service() 方法。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("ul",[n("li",[s._v("一次创建，到处服务")]),s._v(" "),n("li",[s._v("一个Servlet只会有一个对象，服务所有的请求")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('servlet创建的三种方式：\n1.实现servlet接口\npublic class ServletDemo1 implements Servlet {\n    //public ServletDemo1(){}\n     //生命周期方法:当Servlet第一次被创建对象时执行该方法,该方法在整个生命周期中只执行一次\n    public void init(ServletConfig arg0) throws ServletException {\n                System.out.println("=======init=========");\n        }\n    //生命周期方法:对客户端响应的方法,该方法会被执行多次，每次请求该servlet都会执行该方法\n    public void service(ServletRequest arg0, ServletResponse arg1)\n            throws ServletException, IOException {\n        System.out.println("hehe");\n    }\n    //生命周期方法:当Servlet被销毁时执行该方法\n    public void destroy() {\n        System.out.println("******destroy**********");\n    }\n//当停止tomcat时也就销毁的servlet。\n    public ServletConfig getServletConfig() {\n        return null;\n    }\n    public String getServletInfo() {\n        return null;\n    }\n}\n\n2. GenericServlet类（少用）\npublic class ServletDemo2 extends GenericServlet {\n\n    @Override\n    public void service(ServletRequest arg0, ServletResponse arg1)\n            throws ServletException, IOException {\n        System.out.println("heihei");\n\n    }\n}\n\n3.继承HttpServlet方法（常用）\npublic class ServletDemo3 extends HttpServlet {\n    //doGet和doPost方法\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n            throws ServletException, IOException {\n        System.out.println("haha");\n    }\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp)\n            throws ServletException, IOException {\n        System.out.println("ee");\n        doGet(req,resp);\n    }\n\n}\n\nHttpServlet、GenericServlet 和 Servlet 的关系：\n对于一个 Servlet 类，我们日常最常用的方法是继承自 HttpServlet 类，提供了 Http 相关的方法，\nHttpServlet 扩展了 GenericServlet 类，而 GenericServlet 类又实现了 Servlet 类和 ServletConfig 类。\n\nServlet 类提供了五个方法，其中三个生命周期方法和两个普通方法\nGenericServlet 是一个抽象类，实现了 Servlet 接口，并且对其中的 init() 和 destroy() 和 service() 提供了默认实现。\n在 GenericServlet 中，主要完成了以下任务：\n 1.将 init() 中的 ServletConfig 赋给一个类级变量，可以由 getServletConfig 获得；\n 2.为 Servlet 所有方法提供默认实现；\n 3.可以直接调用 ServletConfig 中的方法；\n \n abstract class GenericServlet implements Servlet,ServletConfig{\n    //GenericServlet通过将ServletConfig赋给类级变量\n    private trServletConfig servletConfig;\n    public void init(ServletConfig servletConfig) throws ServletException {\n       this.servletConfig=servletConfig;\n       /*自定义init()的原因是：如果子类要初始化必须覆盖父类的init() 而使它无效 这样\n        this.servletConfig=servletConfig不起作用 这样就会导致空指针异常 这样如果子类要初始化，\n        可以直接覆盖不带参数的init()方法 */\n       this.init();\n    }\n    //自定义的init()方法，可以由子类覆盖  \n    //init()不是生命周期方法\n    public void init(){\n    }\n    //实现service()空方法，并且声明为抽象方法，强制子类必须实现service()方法 \n    public abstract void service(ServletRequest request,ServletResponse response) \n      throws ServletException,java.io.IOException{\n    }\n    //实现空的destroy方法\n    public void destroy(){ }\n }\n \n HttpServlet 也是一个抽象类，它进一步继承并封装了 GenericServlet，使得使用更加简单方便，\n 由于是扩展了 Http 的内容，所以还需要使用 HttpServletRequest 和 HttpServletResponse，\n 这两个类分别是 ServletRequest 和 ServletResponse 的子类。代码如下：\n abstract class HttpServlet extends GenericServlet{\n    //HttpServlet中的service()\n    protected void service(HttpServletRequest httpServletRequest,\n                        HttpServletResponse httpServletResponse){\n         //该方法通过httpServletRequest.getMethod()判断请求类型调用doGet() doPost()\n    }\n    //必须实现父类的service()方法\n    public void service(ServletRequest servletRequest,ServletResponse servletResponse){\n       HttpServletRequest request;\n       HttpServletResponse response;\n       try{\n          request=(HttpServletRequest)servletRequest;\n          response=(HttpServletResponse)servletResponse;\n       }catch(ClassCastException){\n          throw new ServletException("non-http request or response");\n       }\n       //调用service()方法\n       this.service(request,response);\n    }\n }\n \n HttpServlet 中对原始的 Servlet 中的方法都进行了默认的操作，不需要显式的销毁初始化以及 service()，\n 在 HttpServlet 中，自定义了一个新的 service() 方法，其中通过 getMethod() 方法判断请求的类型，\n 从而调用 doGet() 或者 doPost() 处理 get,post 请求，使用者只需要继承 HttpServlet，\n 然后重写 doPost() 或者 doGet() 方法处理请求即可。我们一般都使用继承 HttpServlet 的方式来定义一个 servlet。\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br"),n("span",{staticClass:"line-number"},[s._v("87")]),n("br"),n("span",{staticClass:"line-number"},[s._v("88")]),n("br"),n("span",{staticClass:"line-number"},[s._v("89")]),n("br"),n("span",{staticClass:"line-number"},[s._v("90")]),n("br"),n("span",{staticClass:"line-number"},[s._v("91")]),n("br"),n("span",{staticClass:"line-number"},[s._v("92")]),n("br"),n("span",{staticClass:"line-number"},[s._v("93")]),n("br"),n("span",{staticClass:"line-number"},[s._v("94")]),n("br"),n("span",{staticClass:"line-number"},[s._v("95")]),n("br"),n("span",{staticClass:"line-number"},[s._v("96")]),n("br"),n("span",{staticClass:"line-number"},[s._v("97")]),n("br"),n("span",{staticClass:"line-number"},[s._v("98")]),n("br"),n("span",{staticClass:"line-number"},[s._v("99")]),n("br"),n("span",{staticClass:"line-number"},[s._v("100")]),n("br"),n("span",{staticClass:"line-number"},[s._v("101")]),n("br"),n("span",{staticClass:"line-number"},[s._v("102")]),n("br"),n("span",{staticClass:"line-number"},[s._v("103")]),n("br"),n("span",{staticClass:"line-number"},[s._v("104")]),n("br"),n("span",{staticClass:"line-number"},[s._v("105")]),n("br"),n("span",{staticClass:"line-number"},[s._v("106")]),n("br"),n("span",{staticClass:"line-number"},[s._v("107")]),n("br"),n("span",{staticClass:"line-number"},[s._v("108")]),n("br"),n("span",{staticClass:"line-number"},[s._v("109")]),n("br"),n("span",{staticClass:"line-number"},[s._v("110")]),n("br"),n("span",{staticClass:"line-number"},[s._v("111")]),n("br"),n("span",{staticClass:"line-number"},[s._v("112")]),n("br"),n("span",{staticClass:"line-number"},[s._v("113")]),n("br"),n("span",{staticClass:"line-number"},[s._v("114")]),n("br"),n("span",{staticClass:"line-number"},[s._v("115")]),n("br")])]),n("h2",{attrs:{id:"servlet的doget与dopost方法有什么区别？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#servlet的doget与dopost方法有什么区别？"}},[s._v("#")]),s._v(" Servlet的doGet与doPost方法有什么区别？")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('原因：当表单提交数据到服务器时，一般可以在form表单的method属性中指定post或者get方式提交\n<form action="inputForm"method="get">，不指定，默认为get方式提交\nget传递数据：通过get方式提交的数据有大小的限制，通常在1024字节左右。\nget传递数据实际上是将传递的数据按照”key，value”的方式跟在URL的后面来达到传送的目的的；（这样传输数据的安全性不高）\n\npost传递数据：post没有数据的大小限制，\n而post传递数据是通过http请求的附件（消息主体）进行的，在URL中并没有明文显示。（更加安全）\n\n若想安全并且还想用doget,可以使用post方法提交，然后在dopost里面调用doget方法，在doget方法中写逻辑代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h2",{attrs:{id:"servlet包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#servlet包"}},[s._v("#")]),s._v(" servlet包")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Servlet 可以使用 javax.servlet 和 javax.servlet.http 包创建\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h1",{attrs:{id:"http请求方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#http请求方法"}},[s._v("#")]),s._v(" Http请求方法")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://www.cnblogs.com/weibanggang/p/9454581.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("http请求方法"),n("OutboundLink")],1),n("br"),s._v(" "),n("img",{attrs:{src:"https://images2018.cnblogs.com/blog/1418466/201808/1418466-20180810112625596-2103906128.png",alt:"img"}})]),s._v(" "),n("p",[s._v("#String的常用类\nString StringBuffer StringBuilder")]),s._v(" "),n("ul",[n("li",[s._v("共同点：\n底层都是字符数组构成，String<—>StringBuffer/StringBuilder 互调构造器就可以")]),s._v(" "),n("li",[s._v("区别：\nString是不可变的，因为内部声明为final类型的，如果要改变字符长度，则会创建一个新的内存空间，然后重新赋值。\nStringBuffer\\StringBuilder是可变的，利用.append()方法进行增加，")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("StringBuffer sb1 = new StringBuffer();\n如果是空参的构造器，则底层 char[] value = new char[16] ;\n创建一个长度是16的char数组\nsb1.append(‘a’); // value[0] = ‘a’;\n\nStringBuffer sb2 = new StringBuffer(“abc”);\n如果是有参数的的构造器，则底层 char[] value = new char[str.length()+16];\n创建的时候，不管怎么都多16\n但是要输出 sb1.length() ------3\n\n如果添加的数据底层char型数组装不下了，需要扩容\n默认情况下，扩容为原来容量的 2倍+2，同时将原有数组中的元素复制到新数组中\n如果要添加的数组实在太大，就索性拿要添加的数组的长度来当做扩容的长度\n在使用时，建议使用 StringBuffer(int capacity)/StringBuilder(int cap)这个构造方法\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("ul",[n("li",[s._v("字符串拼接方式的对比：\n常量与常量的拼接结果在常量池，且常量池中不会存在相同内容的常量，但只要其中一个是变量，结果就在堆中。")])]),s._v(" "),n("h1",{attrs:{id:"string-stringbuffer-stringbuilder常用方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#string-stringbuffer-stringbuilder常用方法"}},[s._v("#")]),s._v(" String/StringBuffer/StringBuilder常用方法")]),s._v(" "),n("p",[s._v("增、删、改、查、插、遍历、长度")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('String \ntrim：去字符串首尾空格\nsplit：以某正则表达式分割字符串\nsubstring：截取字符串\ntoLowerCase：字符串转小写\ntoUpperCase：字符串转大写\nlength：字符串字符数\nequals：字符串是否相同\nindexOf：目标字符或字符串在源字符串中位置下标\ncontains：是否包含目标字符串\nformat：格式化字符串\n\nStringBuffer\ns1.append(1);   //append方法提供了各种重载,将指定的字符串追加到此字符序列。\ns1.delete(2,4); //删掉索引为 2,3的元素\ns1.replace(2,4,"hello"); //替换原先索引是2,3上的元素,要添加的数组长度随意\ns1.insert(2,"hello");\ns1.reverse(); // 将此字符序列用其反转形式取代。 String翻转不了\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("p",[s._v("#java中的IO流分为几种？")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("（1）按照数据的流向：\n输入流、输出流\n（2）按照流数据的格式：\n字符流、字节流\n（3）按照流数据的包装过程：\n节点流（低级流）、处理流（高级流）\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("ul",[n("li",[s._v("InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。")]),s._v(" "),n("li",[s._v("OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。")])]),s._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://tva1.sinaimg.cn/large/87df4667gy1gl2pswgolmj20k00u0tab.jpg",alt:"java 中 IO 流分为几种?【面试题详解】插图"}}),s._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://tva1.sinaimg.cn/large/87df4667gy1gl2pt73q6rj20k00ev0tp.jpg",alt:"java 中 IO 流分为几种?【面试题详解】插图(1)"}}),s._v(" "),n("h1",{attrs:{id:"file的常用方法有哪些？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#file的常用方法有哪些？"}},[s._v("#")]),s._v(" file的常用方法有哪些？")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Files. exists()：检测文件路径是否存在。\nFiles. createFile()：创建文件。\nFiles. createDirectory()：创建文件夹。\nFiles. delete()：删除一个文件或目录。\nFiles. copy()：复制文件。\nFiles. move()：移动文件。\nFiles. size()：查看文件个数。\nFiles. read()：读取文件。\nFiles. write()：写入文件。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])])])}),[],!1,null,null,null);e.default=a.exports}}]);