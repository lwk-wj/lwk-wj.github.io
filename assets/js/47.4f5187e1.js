(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{460:function(s,a,e){"use strict";e.r(a);var n=e(2),t=Object(n.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"sql-的-select-语句完整的执行顺序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sql-的-select-语句完整的执行顺序"}},[s._v("#")]),s._v(" SQL 的 select 语句完整的执行顺序")]),s._v(" "),e("ul",[e("li",[s._v("1、from 子句组装来自不同数据源的数据；")]),s._v(" "),e("li",[s._v("2、where 子句基于指定的条件对记录行进行筛选")]),s._v(" "),e("li",[s._v("3、group by 子句将数据划分为多个分组；")]),s._v(" "),e("li",[s._v("4、使用聚集函数进行计算；")]),s._v(" "),e("li",[s._v("5、使用 having 子句筛选分组；")]),s._v(" "),e("li",[s._v("6、计算所有的表达式；")]),s._v(" "),e("li",[s._v("7、select 的字段；")]),s._v(" "),e("li",[s._v("8、使用 order by 对结果集进行排序。")])]),s._v(" "),e("p",[s._v("SQL 语言不同于其他编程语言的最明显特征是处理代码的顺序。"),e("br"),s._v("\n在大多数据库语言中，代码按编码顺序被处理。"),e("br"),s._v("\n但在 SQL 语句中，第一个被处理的子句式 FROM，而不是第一出现的 SELECT。"),e("br"),s._v("\nSQL 查询处理的步骤序号："),e("br")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("(1)FROM <left_table>\n(2)<join_type> JOIN <right_table>\n(3)ON <join_condition>\n(4)WHERE <where_condition>\n(5)GROUP BY <group_by_list>\n(6)WITH {CUBE | ROLLUP}\n(7)HAVING <having_condition>\n(8)SELECT\n(9)DISTINCT\n(9)ORDER BY <order_by_list>\n(10)<TOP_specification> <select_list>\n\n以上每个步骤都会产生一个虚拟表，该虚拟表被用作下一个步骤的输入。\n这些虚拟表对调用者(客户端应用程序或者外部查询)不可用。\n只有最后一步生成的表才会会给调用者。\n如果没有在查询中指定某一个子句，将跳过相应的步骤。\n\n逻辑查询处理阶段简介：\n1、 FROM：对 FROM 子句中的前两个表执行笛卡尔积(交叉联接)，生成虚拟表 VT1。\n2、 ON：对 VT1 应用 ON 筛选器，只有那些使为真才被插入到 TV2。\n3、 OUTER (JOIN):如果指定了 OUTER JOIN(相对于 CROSS JOIN 或 INNER JOIN)，保留表中未找到匹配的行将作为外部行添加到 VT2，生成 TV3。如果 FROM 子句包含两个以上的表，则对上一个联接生成的 结果表和下一个表重复执行步骤 1 到步骤 3，直到处理完所有的表位置。\n4、 WHERE：对 TV3 应用 WHERE 筛选器，只有使为 true 的行才插入 TV4。\n5、 GROUP BY：按 GROUP BY 子句中的列列表对 TV4 中的行进行分组，生成 TV5。\n6、 CUTE|ROLLUP：把超组插入 VT5，生成 VT6。\n7、 HAVING：对 VT6 应用 HAVING 筛选器，只有使为 true 的组插入到 VT7。\n8、 SELECT：处理 SELECT 列表，产生 VT8。\n9、 DISTINCT：将重复的行从 VT8 中删除，产品 VT9。\n10、 ORDER BY：将 VT9 中的行按 ORDER BY 子句中的列列表顺序，生成一个游标(VC10)。\n11、 TOP：从 VC10 的开始处选择指定数量或比例的行，生成表 TV11，并返回给调用者。 where 子句中的条件书写顺序\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br")])]),e("h2",{attrs:{id:"sql之聚合函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sql之聚合函数"}},[s._v("#")]),s._v(" SQL之聚合函数")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("聚合函数是对一组值进行计算并返回单一的值的函数，它经常与select语句中的 group by子句一同使用。\na.avg()：返回的是指定组中的平均值，空值被忽略。\nb.count()：返回的是指定组中的项目个数。\nc.max()：返回指定数据中的最大值。\nd.min()：返回指定数据中的最小值。\ne.sum()：返回指定数据的和，只能用于数字列，空值忽略。\nf.group by()：对数据进行分组，对执行完group by之后的组进行聚合函数的运算，计算每一组的值。\n最后用having 去掉不符合条件的组，having 子句中的每一个元素必须出现在 select 列表中（只针对于 mysql）。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("Avg函数")]),e("p",[s._v("SELECT AVG(balance) FROM "),e("code",[s._v("card")])])]),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("Count函数")]),e("p",[s._v("将瑜伽卡按余额分组查询出来，某个余额下有多少人\nSELECT Count(*)from card GROUP BY card.balance")])]),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("Max函数")]),e("p",[s._v("查询出瑜伽卡表中的余额最多的卡Id和余额\nSELECT MAX(balance),cardId from card")])]),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("MIN函数")]),e("p",[s._v("查询出瑜伽卡表中的余额最少的卡Id和余额，这样只能查询出来一个，因为有很多余额为0的瑜伽卡\nSELECT MIN(balance),cardId from card")])]),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("Sum()函数")]),e("p",[s._v("查询出所有的账户余额总数\nSELECT SUM(balance) from card")])]),e("h2",{attrs:{id:"sql之连接查询（左连接和右连接的区别）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sql之连接查询（左连接和右连接的区别）"}},[s._v("#")]),s._v(" SQL之连接查询（左连接和右连接的区别）")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("外连接：\n左连接（左外连接）：以左表作为基准进行查询，左表数据会全部显示出来，右表如果和左表匹配的 数据则显示相应字段的数据，如果不匹配则显示为 null。\n右连接（右外连接）：以右表作为基准进行查询，右表数据会全部显示出来，左表如果和右表匹配的 数据则显示相应字段的数据，如果不匹配则显示为 null。\n全连接：先以左表进行左外连接，再以右表进行右外连接。\n内连接：显示表之间有连接匹配的所有行。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("左连接(左外连接)")]),e("ul",[e("li",[s._v("SELECT * FROM "),e("code",[s._v("user")]),s._v("LEFT JOIN  user_card ON "),e("code",[s._v("user")]),s._v(".userId=user_card.userId")]),s._v(" "),e("li",[s._v("SELECT * FROM "),e("code",[s._v("user")]),s._v("LEFT Outer JOIN  user_card ON "),e("code",[s._v("user")]),s._v(".userId=user_card.userId")])])]),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("右连接(右外连接)")]),e("ul",[e("li",[s._v("SELECT * FROM "),e("code",[s._v("user")]),s._v("RIGHT  JOIN  user_card ON "),e("code",[s._v("user")]),s._v(".userId=user_card.userId")]),s._v(" "),e("li",[s._v("SELECT * FROM "),e("code",[s._v("user")]),s._v("RIGHT Outer JOIN  user_card ON "),e("code",[s._v("user")]),s._v(".userId=user_card.userId")])])]),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("全连接")]),e("ul",[e("li",[s._v("完整外部联接返回左表和右表中的所有行。")]),s._v(" "),e("li",[s._v("当某行在另一个表中没有匹配行时，则另一个表的选择列表列包含空值。")]),s._v(" "),e("li",[s._v("如果表之间有匹配行，则整个结果集行包含基表的数据值。")]),s._v(" "),e("li",[s._v("SELECT * FROM "),e("code",[s._v("user")]),s._v("  JOIN  user_card ON "),e("code",[s._v("user")]),s._v(".userId=user_card.userId")])])]),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("内连接(自然连接)")]),e("ul",[e("li",[s._v("自然连接是一种特殊的等值连接，他要求两个关系表中进行比较的必须是相同的属性列，无须添加连接条件，并且在结果中消除重复的属性列。")]),s._v(" "),e("li",[s._v("要求是两个这两个关系中参与比较的属性列必须是同名、同属性。")]),s._v(" "),e("li",[s._v("如果两个关系中有多组这样的属性，默认是全部比较的")])])]),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("交叉连接")]),e("ul",[e("li",[s._v("交叉连接即笛卡尔积，结果为A×B")]),s._v(" "),e("li",[s._v("select *from Student cross JOIN Score")])])]),e("h2",{attrs:{id:"sql-之-sql-注入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sql-之-sql-注入"}},[s._v("#")]),s._v(" SQL 之 sql 注入")]),s._v(" "),e("ul",[e("li",[s._v("通过在Web表单中输入（恶意）SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句。")]),s._v(" "),e("li",[s._v("举例：")]),s._v(" "),e("li",[s._v("当执行的 sql 为 select * from user where username = “admin” or “a”=“a”时，sql 语句恒成立，参数 admin 毫无意义。")]),s._v(" "),e("li",[s._v("防止 sql 注入的方式：")]),s._v(" "),e("li",[s._v("1.预编译语句：如，select * from user where username = ？，sql 语句语义不会发生改变，sql 语句中变量用？表示，即使传递参数时为“admin or ‘a’= ‘a’”，也会把这整体当做一个字符创去查询。")]),s._v(" "),e("li",[s._v("2.Mybatis 框架中的 mapper 方式中的 # 也能很大程度的防止 sql 注入（$无法防止 sql 注 入）。")])]),s._v(" "),e("h2",{attrs:{id:"mysql-性能优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql-性能优化"}},[s._v("#")]),s._v(" Mysql 性能优化")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1、当只要一行数据时使用 limit 1 查询时如果已知会得到一条数据，这种情况下加上 limit 1 会增加性能。\n因为 mysql 数据库引擎会在找到一条结果停止搜索，而不是继续查询下一条是否符合标准直到所有记录查询完毕。 \n2、选择正确的数据库引擎\nMysql 中有两个引擎 MyISAM 和 InnoDB，每个引擎有利有弊。\nMyISAM 适用于一些大量查询的应用，但对于有大量写功能的应用不是很好。\n甚至你只需要update 一个字段整个表都会被锁起来。\n而别的进程就算是读操作也不行要等到当前 update 操作完成之后才能继续进行。\n另外，MyISAM 对于 select count(*)这类操作是超级快的。\nInnoDB 的趋势会是一个非常复杂的存储引擎，对于一些小的应用会比 MyISAM 还慢，但是支 持“行锁”，所以在写操作比较多的时候会比较优秀。\n并且，它支持很多的高级应用，例如：事物。\n3.用 not exists 代替 not in\nNot exists 用到了连接能够发挥已经建立好的索引的作用，not in 不能使用索引。\nNot in 是最 慢的方式要同每条记录比较，在数据量比较大的操作红不建议使用这种方式。\n4.对操作符的优化，尽量不采用不利于索引的操作符 \n如：in not inis null is not null<>等 某个字段总要拿来搜索，为其建立索引：\nMysql 中可以利用 alter table 语句来为表中的字段添加索引，语法为：alter table 表明add index (字段名)；\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("h2",{attrs:{id:"必看sql面试题（学生表-课程表-成绩表-教师表）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#必看sql面试题（学生表-课程表-成绩表-教师表）"}},[s._v("#")]),s._v(" 必看sql面试题（学生表_课程表_成绩表_教师表）")]),s._v(" "),e("p",[s._v("最常见的 Mysql 常见面试题和笔试题。\n博客链接： http://www.cnblogs.com/qixuejia/p/3637735.html")]),s._v(" "),e("h2",{attrs:{id:"mysql-数据库架构图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql-数据库架构图"}},[s._v("#")]),s._v(" Mysql 数据库架构图")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/li-wen-kai/picgo/raw/master/img/image-20210607103754567.png",alt:"image-20210607103754567"}})]),s._v(" "),e("p",[s._v("MyISAM 和 InnoDB 是最常见的两种存储引擎，特点如下。")]),s._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("MyISAM 存储引擎")]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("MyISAM 存储引擎\nMyISAM 是 MySQL 官方提供默认的存储引擎，其特点是不支持事务、表锁和全文索引，对于一些 OLAP（联机分析处理）系统，操作速度快。\n每个MyISAM 在磁盘上存储成三个文件。\n文件名都和表名相同，扩展名分别是.frm存储表定义）、.MYD(MYData，存储数据)、.MYI(MYIndex，存储索引)。\n这里特别要注意的是 MyISAM 不缓存数据文件，只缓存索引文件。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])])]),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("InnoDB 存储引擎")]),e("p",[s._v("InnoDB 存储引擎支持事务，主要面向 OLTP（联机事务处理过程）方面的应用，其特点是行锁设置、支持外键， 并支持类似于 Oracle 的非锁定读，即默认情况下读不产生锁。InnoDB 将数据放在一个逻辑表空间中（类似 Oracle）。\nInnoDB 通过多版本并发控制来获得高并发性，实现了 ANSI 标准的 4 种隔离级别，默认为 Repeatable，使用一种被称为 next-key locking 的策略避免幻读。\n对于表中数据的存储，InnoDB 采用类似 Oracle 索引组织表 Clustered 的方式进行存储。\nInnoDB 存储引擎提供了具有提交、回滚和崩溃恢复能力的事务安全。\n但是对比 Myisam 的存储引擎，InnoDB 写的处理效率差一些并且会占用更多的磁盘空间以保留数据和索引。")]),s._v(" "),e("p",[s._v("InnoDB 体系架构")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/li-wen-kai/picgo/raw/master/img/image-20210607104215434.png",alt:"image-20210607104215434"}})])]),e("h2",{attrs:{id:"mysql架构器中各个模块都是什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql架构器中各个模块都是什么？"}},[s._v("#")]),s._v(" Mysql架构器中各个模块都是什么？")]),s._v(" "),e("p",[s._v("（1）、连接管理与安全验证是什么？ 每个客户端都会建立一个与服务器连接的线程，服务器会有一个线程池来管理这些连接；\n如果客户端需要连接到 MYSQL 数据库还需要进行验证，包括用户名、密码、主机信息等。\n（2）、解析器是什么？ 解析器的作用主要是分析查询语句，最终生成解析树；首先解析器会对查询语句的语法进行分析，分析语法是否有问题。\n还有解析器会查询缓存，如果在缓存中有对应的语句，就返回查询结果不进行接下来的优化执行操作。前提是缓存中的数据没有被修改，当然如果被修改了也会被清出缓存。\n（3）、优化器怎么用？ 优化器的作用主要是对查询语句进行优化操作，包括选择合适的索引，数据的读取方式，包括获取查询的开销信息，统计信息等，这也是为什么图中会有优化器指向存储引擎的箭头。\n之前在别的文章没有看到优化器跟存储引擎之间的关系，在这里我个人的理解是因为优化器需要通过存储引擎获取查询的大致数据和统计信息。\n（4）、执行器是什么？ 执行器包括执行查询语句，返回查询结果，生成执行计划包括与存储引擎的一些处理操作。")]),s._v(" "),e("h2",{attrs:{id:"mysql-存储引擎有哪些？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql-存储引擎有哪些？"}},[s._v("#")]),s._v(" Mysql 存储引擎有哪些？")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("（1）、InnoDB 存储引擎\nInnoDB 是事务型数据库的首选引擎，支持事务安全表（ACID），支持行锁定和外键，InnoDB 是默认的 MySQL 引擎。\n（2）、MyISAM 存储引擎\nMyISAM 基于 ISAM 存储引擎，并对其进行扩展。它是在 Web、数据仓储和其他应用环境下最常使用的存储引擎之一。\nMyISAM 拥有较高的插入、查询速度，但不支持事物。\n（3）、MEMORY 存储引擎\nMEMORY 存储引擎将表中的数据存储到内存中，未查询和引用其他表数据提供快速访问。\n（4）、NDB 存储引擎\nDB 存储引擎是一个集群存储引擎，类似于 Oracle 的 RAC，但它是 Share Nothing 的架构，因此能提供更高级别的高可用性和可扩展性。\nNDB 的特点是数据全部放在内存中，因此通过主键查找非常快。\n关于 NDB，有一个问题需要注意，它的连接( join)操作是在 MySQL 数据库层完成，不是在存储引擎层完成，这意味着，复杂的 join 操作需要巨大的网络开销，查询速度会很慢。\n（5）、Memory (Heap) 存储引擎\nMemory 存储引擎（之前称为 Heap）将表中数据存放在内存中，如果数据库重启或崩溃，数据丢失，因此它非常适合存储临时数据。\n（6）、Archive 存储引擎\n正如其名称所示，Archive 非常适合存储归档数据，如日志信息。它只支持 INSERT 和 SELECT 操作，其设计的主要目的是提供高速的插入和压缩功能。\n（7）、Federated 存储引擎\nFederated 存储引擎不存放数据，它至少指向一台远程 MySQL 数据库服务器上的表，非常类似于 Oracle 的透明 网关。\n（8）、Maria 存储引擎\nMaria 存储引擎是新开发的引擎，其设计目标是用来取代原有的 MyISAM 存储引擎，从而成为 MySQL 默认的存储引擎。\n上述引擎中，InnoDB 是事务安全的存储引擎，设计上借鉴了很多 Oracle 的架构思想，一般而言，在 OLTP 应用中，InnoDB 应该作为核心应用表的首先存储引擎。InnoDB 是由第三方的 Innobase Oy 公司开发，现已被Oracle 收购，创始人是 Heikki Tuuri，芬兰赫尔辛基人，和著名的 Linux 创始人 Linus 是校友。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br")])]),e("h2",{attrs:{id:"mysql-事务介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql-事务介绍"}},[s._v("#")]),s._v(" MySQL 事务介绍")]),s._v(" "),e("ul",[e("li",[s._v("MySQL 和其它的数据库产品有一个很大的不同就是事务由存储引擎所决定，例如 MYISAM,MEMORY,ARCHIVE 都不支持事务，事务就是为了解决一组查询要么全部执行成功，要么全部执行失败。")]),s._v(" "),e("li",[s._v("MySQL 事务默认是采取自动提交的模式，除非显示开始一个事务。")]),s._v(" "),e("li",[s._v("SHOW VARIABLES LIKE 'AUTOCOMMIT';")]),s._v(" "),e("li",[s._v("修改自动提交模式，0=OFF,1=ON")]),s._v(" "),e("li",[s._v("注意：修改自动提交对非事务类型的表是无效的，因为它们本身就没有提交和回滚的概念，还有一些命令是会强制自动提交的，比如 DLL 命令、lock tables 等。")]),s._v(" "),e("li",[s._v("SET AUTOCOMMIT=OFF 或 SET AUTOCOMMIT=0")])]),s._v(" "),e("h3",{attrs:{id:"事务的四大特征"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事务的四大特征"}},[s._v("#")]),s._v(" 事务的四大特征")]),s._v(" "),e("ul",[e("li",[s._v("数据库事务 transanction 正确执行的四个基本要素。")]),s._v(" "),e("li",[s._v("ACID,原子性(Atomicity)、一致性(Correspondence)、隔离 性(Isolation)、持久性(Durability)。")])]),s._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("原子性")]),e("p",[s._v("整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。\n事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。")]),s._v(" "),e("p",[s._v("特点：要么全部完成，要么全部不完成，回退到事务开始状态，就像这个事务未被执行过一样")])]),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("一致性")]),e("p",[s._v("在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏\n完整性约束：数据完整性约束指的是为了防止不符合规范的数据进入数据库，在用户对数据进行插入、修改、删除等操作时，\nDBMS自动按照一定的约束条件对数据进行监测，使不符合规范的数据不能进入数据库，以确保数据库中存储的数据正确、有效、相容。")]),s._v(" "),e("p",[s._v("数据的完整性\n分为以下四类：")]),s._v(" "),e("ol",[e("li",[s._v("实体完整性：规定表的每一行在表中是惟一的实体。")]),s._v(" "),e("li",[s._v("域完整性：是指表中的列必须满足某种特定的数据类型约束，其中约束又包括取值范围、精度等规定。")]),s._v(" "),e("li",[s._v("参照完整性：是指两个表的主关键字和外关键字的数据应一致，保证了表之间的数据的一致性，防止了数据丢失或无意义的数据在数据库中扩散。")]),s._v(" "),e("li",[s._v("用户定义的完整性：不同的关系数据库系统根据其应用环境的不同，往往还需要一些特殊的约束条件。\n用户定义的完整性即是针对某个特定关系数据库的约束条件，它反映某一具体应用必须满足的语义要求。")])])]),e("h3",{attrs:{id:"mysql-中四种隔离级别分别是什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql-中四种隔离级别分别是什么？"}},[s._v("#")]),s._v(" Mysql 中四种隔离级别分别是什么？")]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("strong",[s._v("隔离级别")])]),s._v(" "),e("th",[e("strong",[s._v("脏读")])]),s._v(" "),e("th",[e("strong",[s._v("不可重复读")])]),s._v(" "),e("th",[e("strong",[s._v("幻读")])])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("Read uncommitted(读未提交)")]),s._v(" "),e("td",[s._v("是")]),s._v(" "),e("td",[s._v("是")]),s._v(" "),e("td",[s._v("是")])]),s._v(" "),e("tr",[e("td",[s._v("Read committed（读已提交）")]),s._v(" "),e("td",[s._v("否")]),s._v(" "),e("td",[s._v("是")]),s._v(" "),e("td",[s._v("是")])]),s._v(" "),e("tr",[e("td",[s._v("Repeatable read（可重复读）")]),s._v(" "),e("td",[s._v("否")]),s._v(" "),e("td",[s._v("否")]),s._v(" "),e("td",[s._v("是")])]),s._v(" "),e("tr",[e("td",[s._v("Serializable（串行读）")]),s._v(" "),e("td",[s._v("否")]),s._v(" "),e("td",[s._v("否")]),s._v(" "),e("td",[s._v("否")])])])]),s._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("读未提交")]),e("p",[s._v("读未提交（READ UNCOMMITTED）：未提交读隔离级别也叫读脏，就是事务可以读取其它事务未提交的数据。")])]),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("读已提交")]),e("p",[s._v("读已提交（READ COMMITTED）：在其它数据库系统比如 SQL Server 默认的隔离级别就是提交读，已提交读隔离级别就是在事务未提交之前所做的修改其它事务是不可见的。")])]),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("可重复读")]),e("p",[s._v("可重复读（REPEATABLE READ）：保证同一个事务中的多次相同的查询的结果是一致的，比如一个事务一开始查询了一条记录然后过了几秒钟又执行了相同的查询，保证两次查询的结果是相同的，可重复读也是 mysql 的默认隔离级别。")])]),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("可串行化")]),e("p",[s._v("可串行化（SERIALIZABLE）：可串行化就是保证读取的范围内没有新的数据插入，比如事务第一次查询得到某个范围的数据，第二次查询也同样得到了相同范围的数据，中间没有新的数据插入到该范围中。")])]),e("h2",{attrs:{id:"mysql怎么创建存储过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql怎么创建存储过程"}},[s._v("#")]),s._v(" MySQL怎么创建存储过程")]),s._v(" "),e("p",[s._v("MySQL 存储过程是从 MySQL5.0 开始增加的新功能。存储过程的优点有一箩筐。\n不过最主要的还是执行效率和SQL 代码封装。特别是 SQL 代码封装功能，如果没有存储过程，在外部程序访问数据库时，要组织很多 SQL 语句。\n特别是业务逻辑复杂的时候，一大堆的 SQL 和条件夹杂在代码中，让人不寒而栗。现在有了 MySQL 存储过程，业务逻辑可以封装存储过程中，这样不仅容易维护，而且执行效率也高。\n一、创建 MySQL 存储过程\n下面代码创建了一个叫 pr_add 的 MySQL 存储过程，这个 MySQL 存储过程有两个 int 类型的输入参数“a”、“b”，返回这两个参数的和。\n1）drop procedure if exists pr_add; （备注：如果存在 pr_add 的存储过程，则先删掉）\n2）计算两个数之和（备注：实现计算两个整数之和的功能）")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("create procedure pr_add\t(\ta int,\tb int\t)\tbegin\tdeclare c int;\nif a is null then       set a = 0;\n   end if; \nif b is null then       set b = 0;\n   end if; \nset c = a + b;\nselect c as sum;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("二、调用 MySQL 存储过程\ncall pr_add(10, 20);")]),s._v(" "),e("h2",{attrs:{id:"mysql-触发器怎么写？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql-触发器怎么写？"}},[s._v("#")]),s._v(" MySQL 触发器怎么写？")]),s._v(" "),e("ul",[e("li",[s._v("MySQL 包含对触发器的支持。")]),s._v(" "),e("li",[s._v("触发器是一种与表操作有关的数据库对象，当触发器所在表上出现指定事件时， 将调用该对象，即表的操作事件触发表上的触发器的执行。")]),s._v(" "),e("li",[s._v("在 MySQL 中，创建触发器语法如下：")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("CREATE TRIGGER trigger_name \ntrigger_time\ntrigger_event ON tbl_name \nFOR EACH ROW\ntrigger_stmt\n\n其中：\ntrigger_name：标识触发器名称，用户自行指定；        \ntrigger_time：标识触发时机，取值为 BEFORE 或 AFTER； \ntrigger_event：标识触发事件，取值为 INSERT、UPDATE 或 DELETE； \ntbl_name：标识建立触发器的表名，即在哪张表上建立触发器；\ntrigger_stmt：触发器程序体，可以是一句 SQL 语句，或者用 BEGIN 和 END 包含的多条语句。\n\n由此可见， 可以建立 6 种触发器，\n即：\nBEFORE INSERT、\nBEFORE UPDATE、\nBEFORE DELETE、\nAFTER INSERT、\nAFTER UPDATE、\nAFTER DELETE。\n\n另外有一个限制是不能同时在一个表上建立 2 个相同类型的触发器，因此在一个表上最多建立 6 个触发器。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br")])]),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("案例")]),e("ul",[e("li",[s._v("假设系统中有两个表：")]),s._v(" "),e("li",[s._v("1)班级表 class(班级号 classID, 班内学生数 stuCount)")]),s._v(" "),e("li",[s._v("2)学生表 student(学号 stuID, 所属班级号 classID)")]),s._v(" "),e("li",[s._v("要创建触发器来使班级表中的班内学生数随着学生的添加自动更新，代码如下：")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("create trigger tri_stuInsert after insert \non student for each row\nbegin\ndeclare c int;\nset c = (select stuCount from class where classID=new.classID); \nupdate class set stuCount = c + 1 where classID = new.classID;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("ul",[e("li",[s._v("查看触发器：")]),s._v(" "),e("li",[s._v("和查看数据库（show databases;）查看表格（show tables;）一样，查看触发器的语法如下：")]),s._v(" "),e("li",[s._v("SHOW TRIGGERS [FROM schema_name];")]),s._v(" "),e("li",[s._v("其中，schema_name 即 Schema 的名称，在 MySQL 中 Schema 和 Database 是一样的，")]),s._v(" "),e("li",[s._v("也就是说，可以指定数据库名，这样就不必先“USE database_name;”了。")]),s._v(" "),e("li",[s._v("删除触发器：")]),s._v(" "),e("li",[s._v("和删除数据库、删除表格一样，删除触发器的语法如下：")]),s._v(" "),e("li",[s._v("DROP TRIGGER [IF EXISTS] [schema_name.]trigger_name")])])]),e("h2",{attrs:{id:"mysql语句优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql语句优化"}},[s._v("#")]),s._v(" MySQL语句优化")]),s._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("where 子句中可以对字段进行 null 值判断吗？")]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("可以，比如 select id from t where num is null 这样的 sql 也是可以的。\n但是最好不要给数据库留 NULL，尽可能的使用 NOT NULL 填充数据库。\n不要以为 NULL 不需要空间，比如：char(100) 型，在字段建立时，空间就固定了， \n不管是否插入值（NULL 也包含在内），都是占用 100 个字符的空间的，如果是 varchar 这样的变长字段，\nnull 不占用空间。可以在 num 上设置默认值 0，确保表中 num 列没有 null 值，然后这样查询：\nselect id from t where num= 0。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])])]),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("select * from admin left join log on admin.admin_id = log.admin_id where log.admin_id>10 如何优化?")]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("优化为： select * from (select * from admin where admin_id>10) T1 lef join log on T1.admin_id = log.admin_id。\n使用 JOIN 时候，应该用小的结果驱动大的结果（left join 左边表结果尽量小如果有条件应该放到左边先处理， right join 同理反向），\n同时尽量把牵涉到多表联合的查询拆分多个 query（多个连表查询效率低，容易到之后锁表和阻塞）。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])])]),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("limit 的基数比较大时使用 between")]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("例如：select * from admin order by admin_id limit 100000,10\n优化为：select * from admin where admin_id between 100000 and 100010 order by admin_id。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])])]),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("尽量避免在列上做运算，这样导致索引失效")]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("例如：select * from admin where year(admin_time)>2014\n优化为： select * from admin where admin_time> '2014-01-01′\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])])]),e("h2",{attrs:{id:"mysql中文乱码问题完美解决方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql中文乱码问题完美解决方案"}},[s._v("#")]),s._v(" MySQL中文乱码问题完美解决方案")]),s._v(" "),e("ul",[e("li",[s._v("解决乱码的核心思想是统一编码。")]),s._v(" "),e("li",[s._v("我们在使用 MySQL 建数据库和建表时应尽量使用统一的编码，强烈推荐的是 utf8 编码，因为该编码几乎可以兼容世界上所有的字符。")]),s._v(" "),e("li",[s._v("数据库在安装的时候可以设置默认编码，在安装时就一定要设置为 utf8 编码。")]),s._v(" "),e("li",[s._v("设置之后再创建的数据库和表如果不指定编码，默认都会使用 utf8 编码，省去了很多麻烦。")]),s._v(" "),e("li",[s._v("数据库软件安装好之后可以通过如下命令查看默认编码：")]),s._v(" "),e("li",[s._v("1、查询数据库软件使用的默认编码格式")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("show variables like “%colla%”；\nshow varables like “%char%”\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[e("img",{attrs:{src:"https://gitee.com/li-wen-kai/picgo/raw/master/img/image-20210607180109864.png",alt:"image-20210607180109864"}})]),s._v(" "),e("ul",[e("li",[s._v("其中 collation，代表了字符串排序（比较）的规则，如果值是 utf8_general_ci,代表使用 utf8 字符集大小写不敏感的自然方式比较。")]),s._v(" "),e("li",[s._v("如果 character_set 的值不为 utf8，那么可以使用如下命令修改为 utf8。")]),s._v(" "),e("li"),s._v(" "),e("li",[s._v("2、修改数据库默认编码为 utf8")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("SET character_set_client='utf8';\nSET character_set_connection='utf8';\nSET character_set_results='utf8';\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("ul",[e("li",[s._v("如果不想设置数据库软件的全局默认编码，也可以单独修改或者设置某个具体数据库的编码也可以单独修改或设置某个数据库中某个表的编码。")]),s._v(" "),e("li"),s._v(" "),e("li",[s._v("3、创建数据库的时候指定使用 utf8 编码")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("CREATE DATABASE `test` \nCHARACTER SET 'utf8'\nCOLLATE 'utf8_general_ci';\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("ul",[e("li",[s._v("4、创建表的时候指定使用 utf8 编码")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("CREATE TABLE `database_user` (`ID` varchar(40) NOT NULL default '',`UserID` varchar(40) NOT NULL default '',) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[s._v("如果数据库已经创建好了，可以使用 show database 数据库名；和 show create table 表名；")]),s._v(" "),e("li",[s._v("查看一下数据库和表的字符集是否为 utf8 ，如果不是则在命令行下面可以用如下命令，将数据库和表编码修改为 utf8.")]),s._v(" "),e("li"),s._v(" "),e("li",[s._v("5、修改具体某数据库或表的编码")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("ALTER DATABASE `db_name` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;\nALTER TABLE `tb_name` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h2",{attrs:{id:"如何提高-mysql-的安全性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何提高-mysql-的安全性"}},[s._v("#")]),s._v(" 如何提高 MySQL 的安全性")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1.如果 MySQL 客户端和服务器端的连接需要跨越并通过不可信任的网络，那么需要使用 ssh 隧道来加密该连接 的通信。\n2.使用 set password 语句来修改用户的密码，先“mysql -u root”登陆数据库系统，然后“mysql> update mysql.user set password=password(’newpwd’)”，最后执行“flush privileges”。\n3.MySQL 需要提防的攻击有，防偷听、篡改、回放、拒绝服务等，不涉及可用性和容错方面。对所有的连接、查询、其他操作使用基于 ACL（ACL（访问控制列表）是一种路由器配置和控制网络访问的一种有力的工具，它可控制路由器应该允许或拒绝数据包通过，可监控流量，可自上向下检查网络的安全性，可检查和过滤数据和限制不必要的路 由更新，因此让网络资源节约成本的 ACL 配置技术在生活中越来越广泛应用。）即访问控制列表的安全措施来完成。\n4.设置除了 root 用户外的其他任何用户不允许访问 mysql 主数据库中的 user 表； \n5. 使用 grant 和 revoke 语句来进行用户访问控制的工作; \n6.不要使用明文密码，而是使用 md5()和 sha1()等单向的哈系函数来设置密码;\n7.不要选用字典中的字来做密码;\n8.采用防火墙可以去掉 50%的外部危险，让数据库系统躲在防火墙后面工作，或放置在 DMZ（DMZ 是英文“demilitarized zone”的缩写，隔离区，它是为了解决安装防火墙后外部网络的访问用户不能访问内部网络服务器的问题，而设立的一个非安全系统与安全系统之间的缓冲区。）区域中;\n9.从因特网上用 nmap 来扫描 3306 端口，也可用 telnet server_host 3306 的方法测试，不允许从非信任网络中访问数据库服务器的 3306 号 tcp 端口，需要在防火墙或路由器上做设定;\n10.服务端要对 SQL 进行预编译，避免 SQL 注入攻击，例如 where id=234，别人却输入 where id=234 or 1=1。\n11.在传递数据给 mysql 时检查一下大小;\n12.应用程序连接到数据库时应该使用一般的用户帐号，开放少数必要的权限给该用户;\n13.学会使用 tcpdump 和 strings 工具来查看传输数据的安全性，例如 tcpdump -l -i eth0 -w -src or dst port 3306 strings。以普通用户来启动 mysql 数据库服务;\n14.确信在 mysql 目录中只有启动数据库服务的用户才可以对文件有读和写的权限;\n15.不许将 process 或 super 权限付给非管理用户，该 mysqladmin processlist 可以列举出当前执行的查询文本;super 权限可用于切断客户端连接、改变服务器运行参数状态、控制拷贝复制数据库的服务器;\n16.如果不相信 dns 服务公司的服务，可以在主机名称允许表中只设置 ip 数字地址; \n17.使用max_user_connections 变量来使 mysqld 服务进程，对一个指定帐户限定连接数; \n18.grant 语句也支持资源控制选项;\n19.启动 mysqld 服务进程的安全选项开关，–local-infile=0 或 1，若是 0 则客户端程序就无法使用 local load data 了，赋权的一个例子 grant insert(user) on mysql.user to ‘user_name’@'host_name’;若使用–skip-grant- tables 系统将对任何用户的访问不做任何访问控制，但可以用 mysqladmin flush-privileges 或 mysqladmin reload 来开启访问控制;默认情况是 show databases 语句对所有用户开放，可以用–skip-show-databases 来关闭掉。\n23.碰到 error 1045(28000) access denied for user ‘root’@'localhost’ (using password:no)错误时，你需要\n重新设置密码，具体方法是 : 先用 – skip-grant-tables 参 数 启 动 mysqld ，然后执 行 mysql -u root mysql,mysql>update user set password=password(’newpassword’) where user=’root’;mysql>flush privileges;，最后重新启动 mysql 就可以了。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])])])}),[],!1,null,null,null);a.default=t.exports}}]);