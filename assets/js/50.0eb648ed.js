(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{463:function(s,a,t){"use strict";t.r(a);var n=t(2),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#基础概念与常识"}},[s._v("基础概念与常识")]),t("ul",[t("li",[t("a",{attrs:{href:"#java语言的特点"}},[s._v("java语言的特点")])]),t("li",[t("a",{attrs:{href:"#jvm、jdk、jre"}},[s._v("JVM、JDK、JRE")])]),t("li",[t("a",{attrs:{href:"#java和c-的区别？"}},[s._v("java和c++的区别？")])]),t("li",[t("a",{attrs:{href:"#import-java和javax有什么区别"}},[s._v("import java和javax有什么区别")])])])]),t("li",[t("a",{attrs:{href:"#基本语法"}},[s._v("基本语法")]),t("ul",[t("li",[t("a",{attrs:{href:"#字符常量和字符串常量的区别？"}},[s._v("字符常量和字符串常量的区别？")])]),t("li",[t("a",{attrs:{href:"#注释"}},[s._v("注释")])]),t("li",[t("a",{attrs:{href:"#标识符和关键字的区别是什么？"}},[s._v("标识符和关键字的区别是什么？")])]),t("li",[t("a",{attrs:{href:"#自增自减运算符"}},[s._v("自增自减运算符")])]),t("li",[t("a",{attrs:{href:"#continue、break、和-return-的区别是什么？"}},[s._v("continue、break、和 return 的区别是什么？")])]),t("li",[t("a",{attrs:{href:"#java-泛型了解么？什么是类型擦除？介绍一下常用的通配符？"}},[s._v("Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？")])]),t("li",[t("a",{attrs:{href:"#和-equals-的区别"}},[s._v("==和 equals 的区别?")])]),t("li",[t("a",{attrs:{href:"#hashcode-与-equals"}},[s._v("hashCode()与 equals()")])])])]),t("li",[t("a",{attrs:{href:"#基本数据类型"}},[s._v("基本数据类型")]),t("ul",[t("li",[t("a",{attrs:{href:"#java-中的几种基本数据类型是什么？对应的包装类型是什么？各自占用多少字节呢？"}},[s._v("Java 中的几种基本数据类型是什么？对应的包装类型是什么？各自占用多少字节呢？")])]),t("li",[t("a",{attrs:{href:"#自动装箱与拆箱"}},[s._v("自动装箱与拆箱")])])])]),t("li",[t("a",{attrs:{href:"#方法"}},[s._v("方法")]),t("ul",[t("li",[t("a",{attrs:{href:"#什么是方法的返回值"}},[s._v("什么是方法的返回值?")])]),t("li",[t("a",{attrs:{href:"#方法有哪几种类型？"}},[s._v("方法有哪几种类型？")])]),t("li",[t("a",{attrs:{href:"#在一个静态方法内调用一个非静态成员为什么是非法的"}},[s._v("在一个静态方法内调用一个非静态成员为什么是非法的?")])]),t("li",[t("a",{attrs:{href:"#静态方法和实例方法有何不同？"}},[s._v("静态方法和实例方法有何不同？")])]),t("li",[t("a",{attrs:{href:"#为什么-java-中只有值传递？"}},[s._v("为什么 Java 中只有值传递？")])]),t("li",[t("a",{attrs:{href:"#重载和重写的区别？"}},[s._v("重载和重写的区别？")])])])]),t("li",[t("a",{attrs:{href:"#java面向对象"}},[s._v("java面向对象")]),t("ul",[t("li",[t("a",{attrs:{href:"#面向对象和面向过程的区别？"}},[s._v("面向对象和面向过程的区别？")])]),t("li",[t("a",{attrs:{href:"#成员变量与局部变量的区别有哪些？"}},[s._v("成员变量与局部变量的区别有哪些？")])]),t("li",[t("a",{attrs:{href:"#创建一个对象用什么运算符-对象实体与对象引用有何不同"}},[s._v("创建一个对象用什么运算符?对象实体与对象引用有何不同?")])]),t("li",[t("a",{attrs:{href:"#对象的相等与指向他们的引用相等-两者有什么不同"}},[s._v("对象的相等与指向他们的引用相等,两者有什么不同?")])]),t("li",[t("a",{attrs:{href:"#一个类的构造方法的作用是什么-若一个类没有声明构造方法，该程序能正确执行吗-为什么"}},[s._v("一个类的构造方法的作用是什么? 若一个类没有声明构造方法，该程序能正确执行吗? 为什么?")])]),t("li",[t("a",{attrs:{href:"#构造方法有哪些特点？是否可被-override"}},[s._v("构造方法有哪些特点？是否可被 override?")])]),t("li",[t("a",{attrs:{href:"#面向对象三大特征"}},[s._v("面向对象三大特征")])]),t("li",[t("a",{attrs:{href:"#string-stringbuffer-和-stringbuilder-的区别是什么-string-为什么是不可变的"}},[s._v("String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?")])]),t("li",[t("a",{attrs:{href:"#object-类的常见方法总结"}},[s._v("Object 类的常见方法总结")])])])]),t("li",[t("a",{attrs:{href:"#反射"}},[s._v("反射")]),t("ul",[t("li",[t("a",{attrs:{href:"#何为反射？"}},[s._v("何为反射？")])]),t("li",[t("a",{attrs:{href:"#反射机制优缺点"}},[s._v("反射机制优缺点")])]),t("li",[t("a",{attrs:{href:"#反射的应用场景"}},[s._v("反射的应用场景")])])])]),t("li",[t("a",{attrs:{href:"#异常"}},[s._v("异常")]),t("ul",[t("li",[t("a",{attrs:{href:"#java-异常类层次结构图"}},[s._v("Java 异常类层次结构图")])]),t("li",[t("a",{attrs:{href:"#throwable-类常用方法"}},[s._v("Throwable 类常用方法")])]),t("li",[t("a",{attrs:{href:"#try-catch-finally"}},[s._v("try-catch-finally")])])])]),t("li",[t("a",{attrs:{href:"#i-o流"}},[s._v("I/O流")]),t("ul",[t("li",[t("a",{attrs:{href:"#什么是序列化-什么是反序列化"}},[s._v("什么是序列化?什么是反序列化?")])]),t("li",[t("a",{attrs:{href:"#java-序列化中如果有些字段不想进行序列化，怎么办？"}},[s._v("Java 序列化中如果有些字段不想进行序列化，怎么办？")])]),t("li",[t("a",{attrs:{href:"#获取用键盘输入常用的两种方法"}},[s._v("获取用键盘输入常用的两种方法")])]),t("li",[t("a",{attrs:{href:"#java-中-io-流分为几种"}},[s._v("Java 中 IO 流分为几种?")])]),t("li",[t("a",{attrs:{href:"#既然有了字节流-为什么还要有字符流"}},[s._v("既然有了字节流,为什么还要有字符流?")])])])])])]),t("p"),s._v(" "),t("h2",{attrs:{id:"基础概念与常识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础概念与常识"}},[s._v("#")]),s._v(" 基础概念与常识")]),s._v(" "),t("h3",{attrs:{id:"java语言的特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java语言的特点"}},[s._v("#")]),s._v(" java语言的特点")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("简单易学\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("面向对象（封装、继承、多态、抽象）\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v("平台无关（jvm来实现可移植性，平台无关性）\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.")]),s._v("支持多线程（c"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("语言没有内置的多线程机制，java语言提供了多线程的支持）\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.")]),s._v("可靠性\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.")]),s._v("安全性\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.")]),s._v("支持网络编程（ "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Java")]),s._v(" 语言诞生本身就是为简化网络编程设计的，因此 "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Java")]),s._v(" 语言不仅支持网络编程而且很方便）\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.")]),s._v("编译和解释并存\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h3",{attrs:{id:"jvm、jdk、jre"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jvm、jdk、jre"}},[s._v("#")]),s._v(" JVM、JDK、JRE")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("JVM")]),t("ul",[t("li",[s._v("JVM是运行java字节码的虚拟机。JVM有针对不同系统的特定实现（Windows、Linux、macOS），目的是使用相同的字节码，都会给出相同的结果。")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("在java中，jvm可以理解的代码就叫做字节码（即扩展名为"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v("文件），它不面向任何特定的处理器，只面向虚拟机。\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Java")]),s._v(" 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。\n所以 "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Java")]),s._v(" 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Java")]),s._v(" 程序无须重新编译便可在多种不同操作系统的计算机上运行。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("ul",[t("li",[s._v("java程序从源代码到运行一般有下面3步：\n"),t("img",{attrs:{src:"https://gitee.com/li-wen-kai/picgo/raw/master/img/20210709161829.png",alt:"运行过程"}})])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("了解：\n我们需要格外注意的是 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("机器码 这一步。\n在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。\n而且，有些方法和代码块是经常需要被调用的"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("也就是所谓的热点代码"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，所以后面引进了 JIT 编译器，而 JIT 属于运行时编译。\n当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。\n而我们知道，机器码的运行效率肯定是高于 "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Java")]),s._v(" 解释器的。\n这也解释了我们为什么经常会说 "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Java")]),s._v(" 是编译与解释共存的语言。\n\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HotSpot")]),s._v(" 采用了惰性评估"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Lazy")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Evaluation")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("的做法，根据二八定律，消耗大部分系统资源的只有那一小部分的代码（热点代码），而这也就是 JIT 所需要编译的部分。\nJVM 会根据代码每次被执行的情况收集信息并相应地做出一些优化，因此执行的次数越多，它的速度就越快。\nJDK "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" 引入了一种新的编译模式 "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("AOT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Ahead")]),s._v(" of "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Time")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Compilation")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，它是直接将字节码编译成机器码，这样就避免了 JIT 预热等各方面的开销。\nJDK 支持分层编译和 AOT 协作使用。\n但是 ，AOT 编译器的编译质量是肯定比不上 JIT 编译器的。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[t("strong",[s._v("总结")])]),s._v(" "),t("ul",[t("li",[s._v("Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。")]),s._v(" "),t("li",[s._v("字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。")])])]),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("JDK")]),t("ul",[t("li",[s._v("JDK 是 Java Development Kit 缩写，它是功能齐全的 Java SDK。")]),s._v(" "),t("li",[s._v("它拥有 JRE 所拥有的一切，还有编译器（javac）和工具（如 javadoc 和 jdb）。它能够创建和编译程序。")])])]),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("JRE")]),t("ul",[t("li",[s._v("JRE 是 Java 运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，java 命令和其他的一些基础构件。但是，它不能用于创建新程序。")])])]),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("如果你只是为了运行一下 "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Java")]),s._v(" 程序的话，那么你只需要安装 JRE 就可以了。\n如果你需要进行一些 "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Java")]),s._v(" 编程方面的工作，那么你就需要安装 JDK 了。但是，这不是绝对的。\n有时，即使您不打算在计算机上进行任何 "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Java")]),s._v(" 开发，仍然需要安装 JDK。\n例如，如果要使用 JSP 部署 "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Web")]),s._v(" 应用程序，那么从技术上讲，您只是在应用程序服务器中运行 "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Java")]),s._v(" 程序。\n那你为什么需要 JDK 呢？\n因为应用程序服务器会将 JSP 转换为 "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Java")]),s._v(" servlet，并且需要使用 JDK 来编译 servlet。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h3",{attrs:{id:"java和c-的区别？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java和c-的区别？"}},[s._v("#")]),s._v(" java和c++的区别？")]),s._v(" "),t("ul",[t("li",[s._v("都是面向对象的语言，都支持封装、继承和多态")]),s._v(" "),t("li",[s._v("Java 不提供指针来直接访问内存，程序内存更加安全")]),s._v(" "),t("li",[s._v("Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承(实现)。")]),s._v(" "),t("li",[s._v("Java 有自动内存管理垃圾回收机制(GC)，不需要程序员手动释放无用内存。")]),s._v(" "),t("li",[s._v("C ++同时支持方法重载和操作符重载，但是 Java 只支持方法重载（操作符重载增加了复杂性，这与 Java 最初的设计思想不符）。")])]),s._v(" "),t("h3",{attrs:{id:"import-java和javax有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#import-java和javax有什么区别"}},[s._v("#")]),s._v(" import java和javax有什么区别")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("刚开始的时候 "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("JavaAPI")]),s._v(" 所必需的包是 java 开头的包，javax 当时只是扩展 API 包来使用。\n然而随着时间的推移，javax 逐渐地扩展成为 "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Java")]),s._v(" API 的组成部分。\n但是，将扩展从 javax 包移动到 java 包确实太麻烦了，最终会破坏一堆现有的代码。\n因此，最终决定 javax 包将成为标准 API 的一部分。\n\t\n所以，实际上 java 和 javax 没有区别。这都是一个名字。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h2",{attrs:{id:"基本语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本语法"}},[s._v("#")]),s._v(" 基本语法")]),s._v(" "),t("h3",{attrs:{id:"字符常量和字符串常量的区别？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符常量和字符串常量的区别？"}},[s._v("#")]),s._v(" 字符常量和字符串常量的区别？")]),s._v(" "),t("ul",[t("li",[s._v("形式 : 字符常量是单引号引起的一个字符，字符串常量是双引号引起的 0 个或若干个字符")]),s._v(" "),t("li",[s._v("含义 : 字符常量相当于一个整型值( ASCII 值),可以参加表达式运算; 字符串常量代表一个地址值(该字符串在内存中存放位置)")]),s._v(" "),t("li",[s._v("占内存大小 ： 字符常量只占 2 个字节; 字符串常量占若干个字节 (注意： char 在 Java 中占两个字节)\n"),t("strong",[s._v("字符封装类 Character 有一个成员常量 Character.SIZE 值为 16,单位是bits,该值除以 8(1byte=8bits)后就可以得到 2 个字节")]),s._v(" "),t("img",{attrs:{src:"https://gitee.com/li-wen-kai/picgo/raw/master/img/20210710160328.jpeg",alt:"基本数据类型以及包装类"}})])]),s._v(" "),t("h3",{attrs:{id:"注释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[s._v("#")]),s._v(" 注释")]),s._v(" "),t("ul",[t("li",[s._v("单行注释")]),s._v(" "),t("li",[s._v("多行注释")]),s._v(" "),t("li",[s._v("文档注释")])]),s._v(" "),t("h3",{attrs:{id:"标识符和关键字的区别是什么？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标识符和关键字的区别是什么？"}},[s._v("#")]),s._v(" 标识符和关键字的区别是什么？")]),s._v(" "),t("ul",[t("li",[s._v("标识符就是一个名字")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("起源：编写程序的时候，需要大量地为程序、类、变量、方法等取名字，于是就有了标识符\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("关键字（Java语言已经赋予了其特殊的含义，只能用于特定的地方，这种特殊的标识符）\n| 访问控制             | private  | protected  | public   |              |            |           |        |\n| -------------------- | -------- | ---------- | -------- | ------------ | ---------- | --------- | ------ |\n| 类，方法和变量修饰符 | abstract | class      | extends  | final        | implements | interface | native |\n|                      | new      | static     | strictfp | synchronized | transient  | volatile  |        |\n| 程序控制             | break    | continue   | return   | do           | while      | if        | else   |\n|                      | for      | instanceof | switch   | case         | default    |           |        |\n| 错误处理             | try      | catch      | throw    | throws       | finally    |           |        |\n| 包相关               | import   | package    |          |              |            |           |        |\n| 基本类型             | boolean  | byte       | char     | double       | float      | int       | long   |\n|                      | short    | null       | true     | false        |            |           |        |\n| 变量引用             | super    | this       | void     |              |            |           |        |\n| 保留字               | goto     | const      |          |              |            |           |        |")])]),s._v(" "),t("h3",{attrs:{id:"自增自减运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自增自减运算符"}},[s._v("#")]),s._v(" 自增自减运算符")]),s._v(" "),t("ul",[t("li",[s._v("自增运算符（++)和自减运算符（--）")]),s._v(" "),t("li",[s._v("当运算符放在变量之前时(前缀)，先自增/减，再赋值；当运算符放在变量之后时(后缀)，先赋值，再自增/减。")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("例如，当 b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("a 时，先自增（自己增加 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("），再赋值（赋值给 b）；\n当 b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v(" 时，先赋值"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("赋值给 b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，再自增（自己增加 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("）。\n也就是，"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("a 输出的是 a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" 的值，a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("输出的是 a 值。\n用一句口诀就是：“符号在前就先加"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("减，符号在后就后加"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("减”。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"continue、break、和-return-的区别是什么？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#continue、break、和-return-的区别是什么？"}},[s._v("#")]),s._v(" continue、break、和 return 的区别是什么？")]),s._v(" "),t("ul",[t("li",[s._v("continue ：指跳出当前的这一次循环，继续下一次循环。")]),s._v(" "),t("li",[s._v("break ：指跳出整个循环体，继续执行循环下面的语句。")]),s._v(" "),t("li",[s._v("return 用于跳出所在方法，结束该方法的运行。return 一般有两种用法：\n1.return; ：直接使用 return 结束方法执行，用于没有返回值函数的方法\n2.return value; ：return 一个特定值，用于有返回值函数的方法")])]),s._v(" "),t("h3",{attrs:{id:"java-泛型了解么？什么是类型擦除？介绍一下常用的通配符？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-泛型了解么？什么是类型擦除？介绍一下常用的通配符？"}},[s._v("#")]),s._v(" Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？")]),s._v(" "),t("ul",[t("li",[s._v("泛型是JDK5引入的一个新特性，泛型提供了编译时类型安全检测机制该机制允许程序员在编译时检测到非法的类型。")]),s._v(" "),t("li",[s._v("泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。")]),s._v(" "),t("li",[s._v("Java 的泛型是伪泛型，这是因为 Java 在编译期间，所有的泛型信息都会被擦掉，这也就是通常所说类型擦除 。")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" list "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nlist"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//这里直接添加会报错")]),s._v("\nlist"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" clazz "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Method")]),s._v(" add "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" clazz"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getDeclaredMethod")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"add"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//但是通过反射添加，是可以的")]),s._v("\nadd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("invoke")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"kl"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("ul",[t("li",[s._v("泛型一般有三种使用方式:泛型类、泛型接口、泛型方法。")])]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("1.泛型类")]),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//在实例化泛型类时，必须指定T的具体类型")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Generic")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Generic")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getKey")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n实例化泛型类：\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Generic")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" genericInteger "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Generic")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])])]),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("2.泛型接口")]),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("泛型接口：\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Generator")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("method")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n两种方式实现泛型接口：\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("）实现泛型接口，不指定类型\n泛型接口实现类：\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("GeneratorImpl")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Generator")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("method")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("）实现泛型接口，指定类型\n泛型接口实现类：\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("GeneratorImpl")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Generator")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("method")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br")])])]),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("3.泛型方法：")]),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("E")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printArray")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("E")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" inputArray"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("E")]),s._v(" element "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" inputArray"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%s "')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" element"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("使用：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建不同类型数组： Integer, Double 和 Character")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" intArray "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" stringArray "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"World"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printArray")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("intArray"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printArray")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("stringArray"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])])]),t("ul",[t("li",[s._v("常用的通配符为： T，E，K，V，？")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("？ 表示不确定的 java 类型\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("type"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 表示具体的一个 java 类型\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 分别代表 java 键值中的 "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Key")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Value")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("E")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("element"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 代表 "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Element")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"和-equals-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#和-equals-的区别"}},[s._v("#")]),s._v(" ==和 equals 的区别?")]),s._v(" "),t("ul",[t("li",[s._v("对于基本数据类型来说，==比较的是值。对于引用数据类型来说，==比较的是对象的内存地址。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("因为 Java 只有值传递，所以，对于 == 来说，不管是比较基本数据类型，还是引用数据类型的变量，其本质比较的都是值，只是引用类型变量存的值是对象的地址。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("equals() 作用不能用于判断基本数据类型的变量，只能用来判断两个对象是否相等。equals()方法存在于Object类中，而Object类是所有类的直接或间接父类。")])]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("Object 类 equals() 方法")]),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("equals")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])])]),t("p",[s._v("equals() 方法存在两种使用情况：")]),s._v(" "),t("ul",[t("li",[s._v("类没有覆盖 equals()方法")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("通过equals()比较该类的两个对象时，等价于通过“==”比较这两个对象，使用的默认是 Object类equals()方法。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("类覆盖了 equals()方法")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("一般我们都覆盖 equals()方法来比较两个对象中的属性是否相等；若它们的属性相等，则返回 true(即，认为这两个对象相等)。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("案例")]),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" test1 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ab"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// a 为一个引用")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ab"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// b为另一个引用,对象的内容一样")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" aa "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ab"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 放在常量池中")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" bb "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ab"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 从常量池中查找")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("aa "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" bb"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"aa==bb"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false，非同一对象")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a==b"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("equals")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"aEQb"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("42.0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"true"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])]),t("p",[t("strong",[s._v("说明")])]),s._v(" "),t("ul",[t("li",[s._v("String中的equals方法是被重写过的，因为Object的equals方法是比较的对象的内存地址，而String的equals方法比较的是对象的值。")]),s._v(" "),t("li",[s._v("当创建 String 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 String 对象。")])])]),t("ul",[t("li",[s._v("String类的equals()方法：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("public boolean equals(Object anObject) {\n    if (this == anObject) {\n        return true;\n    }\n    if (anObject instanceof String) {\n        String anotherString = (String)anObject;\n        int n = value.length;\n        if (n == anotherString.value.length) {\n            char v1[] = value;\n            char v2[] = anotherString.value;\n            int i = 0;\n            while (n-- != 0) {\n                if (v1[i] != v2[i])\n                    return false;\n                i++;\n            }\n            return true;\n        }\n    }\n    return false;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br")])]),t("h3",{attrs:{id:"hashcode-与-equals"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashcode-与-equals"}},[s._v("#")]),s._v(" hashCode()与 equals()")]),s._v(" "),t("ul",[t("li",[s._v("你重写过 hashcode 和 equals么，为什么重写 equals 时必须重写 hashCode 方法？")])]),s._v(" "),t("ol",[t("li",[s._v("hashCode()介绍")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("hashCode() 的作用是获取哈希码，也称为散列码；\n它实际上是返回一个 int 整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。\nhashCode()定义在 JDK 的 Object 类中，这就意味着 Java 中的任何类都包含有 hashCode() 函数。\n另外需要注意的是： Object 的 hashcode 方法是本地方法，也就是用 c 语言或 c++ 实现的，该方法通常用来将对象的内存地址转换为整数之后返回。\n\npublic native int hashCode();\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！（可以快速找到所需要的对象\n2. 为什么要有 hashCode？")]),s._v(" "),t("ul",[t("li",[s._v("我们以“HashSet 如何检查重复”为例子来说明为什么要有 hashCode？")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("当你把对象加入到HashSet中，HashSet会先计算对象的hashcode的值来判断对象加入的位置同时也会与其他已经加入的对象的 hashcode 值作比较；\n1.如果没有相符的 hashcode，HashSet 会假设对象没有重复出现。\n2.如果发现有相同 hashcode 值的对象，这时会调用 equals() 方法来检查 hashcode 相等的对象是否真的相同。\n   2.1、如果两者相同，HashSet 就不会让其加入操作成功。\n   2.2、如果不同的话，就会重新散列到其他位置。\n   \n这样我们就大大减少了 equals 的次数，相应就大大提高了执行速度。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("ol",{attrs:{start:"3"}},[t("li",[s._v("为什么重写 equals 时必须重写 hashCode 方法？")])]),s._v(" "),t("ul",[t("li",[s._v("如果两个对象相等，则 hashcode 一定也是相同的。两个对象相等,对两个对象分别调用 equals 方法都返回 true。")]),s._v(" "),t("li",[s._v("但是，两个对象有相同的 hashcode 值，它们也不一定是相等的 。因此，equals 方法被覆盖过，则 hashCode 方法也必须被覆盖。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("hashCode()的默认行为是对堆上的对象产生独特值。如果没有重写 hashCode()，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ol",{attrs:{start:"4"}},[t("li",[s._v("为什么两个对象有相同的 hashcode 值，它们也不一定是相等的？")])]),s._v(" "),t("ul",[t("li",[s._v("因为 hashCode() 所使用的哈希算法也许刚好会让多个对象传回相同的哈希值。")]),s._v(" "),t("li",[s._v("越糟糕的哈希算法越容易碰撞，但这也与数据值域分布的特性有关（所谓碰撞也就是指的是不同的对象得到相同的 hashCode。")]),s._v(" "),t("li",[s._v("我们刚刚也提到了 HashSet,如果 HashSet 在对比的时候，同样的 hashcode 有多个对象，它会使用 equals() 来判断是否真的相同。")]),s._v(" "),t("li",[s._v("也就是说 hashcode 只是用来缩小查找成本。")])]),s._v(" "),t("h2",{attrs:{id:"基本数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型"}},[s._v("#")]),s._v(" 基本数据类型")]),s._v(" "),t("h3",{attrs:{id:"java-中的几种基本数据类型是什么？对应的包装类型是什么？各自占用多少字节呢？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-中的几种基本数据类型是什么？对应的包装类型是什么？各自占用多少字节呢？"}},[s._v("#")]),s._v(" Java 中的几种基本数据类型是什么？对应的包装类型是什么？各自占用多少字节呢？")]),s._v(" "),t("p",[s._v("Java中有8种基本数据类型，分别为：")]),s._v(" "),t("blockquote",[t("p",[s._v("byte、short、int、long、float、double、boolean、char\n这8种基本数据类型的默认值以及所占空间的大小如下：\n| 基本类型  | 位数 | 字节 | 默认值  |\n| --------- | ---- | ---- | ------- |\n| "),t("code",[s._v("int")]),s._v("     | 32   | 4    | 0       |\n| "),t("code",[s._v("short")]),s._v("   | 16   | 2    | 0       |\n| "),t("code",[s._v("long")]),s._v("    | 64   | 8    | 0L      |\n| "),t("code",[s._v("byte")]),s._v("    | 8    | 1    | 0       |\n| "),t("code",[s._v("char")]),s._v("    | 16   | 2    | 'u0000' |\n| "),t("code",[s._v("float")]),s._v("   | 32   | 4    | 0f      |\n| "),t("code",[s._v("double")]),s._v("  | 64   | 8    | 0d      |\n| "),t("code",[s._v("boolean")]),s._v(" | 1    |      | false   |")])]),s._v(" "),t("ul",[t("li",[s._v("另外，对于 boolean，官方文档未明确定义，它依赖于 JVM 厂商的具体实现。逻辑上理解是占用 1 位，但是实际中会考虑计算机高效存储因素。\n"),t("strong",[s._v("注意")])])]),s._v(" "),t("blockquote",[t("p",[s._v("八种基本数据类型对应的包装类分别为：Byte、Short、Integer、Long、Float、Double、Character、Boolean 。")])]),s._v(" "),t("ul",[t("li",[s._v("包装类型不赋值就是 Null ，而基本类型有默认值且不是 Null。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("另外，这个问题建议还可以先从 JVM 层面来分析。\n基本数据类型直接存放在 Java 虚拟机栈中的局部变量表中，而包装类型属于对象类型，我们知道对象实例都存在于堆中。\n相比于对象类型， 基本数据类型占用的空间非常小。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("blockquote",[t("p",[s._v("局部变量表主要存放了编译期可知的基本数据类型**（boolean、byte、char、short、int、float、long、double）**、对象引用（reference 类型，\n它不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）。")])]),s._v(" "),t("ul",[t("li",[s._v("Java 里使用 long 类型的数据一定要在数值后面加上 L，否则将作为整型解析。")]),s._v(" "),t("li",[s._v("char a = 'h'char :单引号，String a = \"hello\" :双引号。")])]),s._v(" "),t("h3",{attrs:{id:"自动装箱与拆箱"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自动装箱与拆箱"}},[s._v("#")]),s._v(" 自动装箱与拆箱")]),s._v(" "),t("ul",[t("li",[s._v("装箱：将基本类型用它们对应的引用类型包装起来；")]),s._v(" "),t("li",[s._v("拆箱：将包装类型转换为基本数据类型；")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Integer i = 10;  //装箱\nint n = i;   //拆箱\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("字节码文件")]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("   L1\n    LINENUMBER 8 L1\n    ALOAD 0\n    BIPUSH 10\n    INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;\n    PUTFIELD AutoBoxTest.i : Ljava/lang/Integer;\n   L2\n    LINENUMBER 9 L2\n    ALOAD 0\n    ALOAD 0\n    GETFIELD AutoBoxTest.i : Ljava/lang/Integer;\n    INVOKEVIRTUAL java/lang/Integer.intValue ()I\n    PUTFIELD AutoBoxTest.n : I\n    RETURN\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("blockquote",[t("p",[s._v("结论：从字节码中，我们发现装箱其实就是调用了包装类的valueOf()方法，拆箱其实就是调用了 xxxValue()方法。")])])]),t("blockquote",[t("p",[s._v("总结：")])]),s._v(" "),t("ul",[t("li",[s._v("Integer i = 10 等价于 Integer i = Integer.valueOf(10)")]),s._v(" "),t("li",[s._v("int n = i 等价于 int n = i.intValue();")])]),s._v(" "),t("h2",{attrs:{id:"方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[s._v("#")]),s._v(" 方法")]),s._v(" "),t("h3",{attrs:{id:"什么是方法的返回值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是方法的返回值"}},[s._v("#")]),s._v(" 什么是方法的返回值?")]),s._v(" "),t("blockquote",[t("p",[s._v("方法的返回值是指我们获取到的某个方法体中的代码执行后产生的结果！（前提是该方法可能产生结果）。返回值的作用是接收出结果，使得它可以用于其他的操作！")])]),s._v(" "),t("h3",{attrs:{id:"方法有哪几种类型？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法有哪几种类型？"}},[s._v("#")]),s._v(" 方法有哪几种类型？")]),s._v(" "),t("ol",[t("li",[s._v("无参数无返回值的方法")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('// 无参数无返回值的方法(如果方法没有返回值，不能不写，必须写void，表示没有返回值)\npublic void f1() {\n    System.out.println("无参数无返回值的方法");\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("有参数无返回值的方法")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('/**\n* 有参数无返回值的方法\n* 参数列表由零组到多组“参数类型+形参名”组合而成，多组参数之间以英文逗号（,）隔开，形参类型和形参名之间以英文空格隔开\n*/\npublic void f2(int a, String b, int c) {\n    System.out.println(a + "--\x3e" + b + "--\x3e" + c);\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("ol",{attrs:{start:"3"}},[t("li",[s._v("有返回值无参数的方法")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('// 有返回值无参数的方法（返回值可以是任意的类型,在函数里面必须有return关键字返回对应的类型）\npublic int f3() {\n    System.out.println("有返回值无参数的方法");\n    return 2;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("ol",{attrs:{start:"4"}},[t("li",[s._v("有返回值有参数的方法")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// 有返回值有参数的方法\npublic int f4(int a, int b) {\n    return a * b;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("ol",{attrs:{start:"5"}},[t("li",[s._v("return 在无返回值方法的特殊使用")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// return在无返回值方法的特殊使用\npublic void f5(int a) {\n    if (a > 10) {\n        return;//表示结束所在方法 （f5方法）的执行,下方的输出语句不会执行\n    }\n    System.out.println(a);\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h3",{attrs:{id:"在一个静态方法内调用一个非静态成员为什么是非法的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在一个静态方法内调用一个非静态成员为什么是非法的"}},[s._v("#")]),s._v(" 在一个静态方法内调用一个非静态成员为什么是非法的?")]),s._v(" "),t("blockquote",[t("p",[s._v("静态方法是属于类的，在类加载的时候就会分配内存，可以通过类名直接访问。\n非静态成员属于实例对象，只有在对象实例化之后才存在，然后通过类的实例对象去访问。\t\n在类的非静态成员不存在的时候静态成员就已经存在了，此时调用在内存中还不存在的非静态成员，属于非法操作。")])]),s._v(" "),t("h3",{attrs:{id:"静态方法和实例方法有何不同？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态方法和实例方法有何不同？"}},[s._v("#")]),s._v(" 静态方法和实例方法有何不同？")]),s._v(" "),t("ul",[t("li",[s._v('在外部调用静态方法时，可以使用"类名.方法名"的方式，也可以使用"对象名.方法名"的方式。而实例方法只有后面这种方式。\n'),t("strong",[s._v("调用静态方法可以无需创建对象。")])]),s._v(" "),t("li",[s._v("静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），而不允许访问实例成员变量和实例方法；实例方法则无此限制。")])]),s._v(" "),t("h3",{attrs:{id:"为什么-java-中只有值传递？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么-java-中只有值传递？"}},[s._v("#")]),s._v(" 为什么 Java 中只有值传递？")]),s._v(" "),t("ul",[t("li",[s._v("按值调用(call by value) 表示方法接收的是调用者提供的值，按引用调用（call by reference) 表示方法接收的是调用者提供的变量地址。")]),s._v(" "),t("li",[s._v("一个方法可以修改传递引用所对应的变量值，而不能修改传递值调用所对应的变量值。")])]),s._v(" "),t("blockquote",[t("p",[s._v("Java 程序设计语言总是采用按值调用。也就是说，方法得到的是所有参数值的一个拷贝，也就是说，方法不能修改传递给它的任何参数变量的内容\n用三个案例来证实：")])]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("案例一")]),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" num1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" num2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("swap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("num1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" num2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"num1 = "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" num1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"num2 = "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" num2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("swap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" temp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" temp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a = "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b = "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n\n结果：\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("\nb "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\nnum1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\nnum2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://gitee.com/li-wen-kai/picgo/raw/master/img/20210710173046.jpeg",alt:"解析"}})]),s._v(" "),t("blockquote",[t("p",[s._v("结论：在 swap 方法中，a、b 的值进行交换，并不会影响到 num1、num2。因为，a、b 中的值，只是从 num1、num2 的复制过来的。也就是说，a、b 相当于 num1、num2 的副本，副本的内容无论怎么修改，都不会影响到原件本身。")])])]),t("ul",[t("li",[s._v("通过上面例子，我们已经知道了一个方法不能修改一个基本数据类型的参数，而对象引用作为参数就不一样，请看案例二.")])]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("案例二")]),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" arr "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("change")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("change")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将数组的第一个元素变为0")]),s._v("\n\t\tarray"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t\n结果：\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://gitee.com/li-wen-kai/picgo/raw/master/img/20210710173510.jpeg",alt:"解析"}})]),s._v(" "),t("blockquote",[t("p",[s._v("结论：array 被初始化 arr 的拷贝也就是一个对象的引用，也就是说 array 和 arr 指向的是同一个数组对象。 因此，外部对引用对象的改变会反映到所对应的对象上。\n实现一个改变对象参数状态的方法并不是一件难事。理由很简单，方法得到的是对象引用的拷贝，对象引用及其他的拷贝同时引用同一个对象。")])])]),t("blockquote",[t("p",[s._v("很多程序设计语言（特别是，C++和 Pascal)提供了两种参数传递的方式：值调用和引用调用。有些程序员（甚至本书的作者）认为 Java 程序设计语言对对象采用的是引用调用，实际上，这种理解是不对的。\n由于这种误解具有一定的普遍性，所以下面给出一个反例来详细地阐述一下这个问题。")])]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("案例三")]),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Test")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// TODO Auto-generated method stub")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Student")]),s._v(" s1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Student")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"小张"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Student")]),s._v(" s2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Student")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"小李"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("swap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" s2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"s1:"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"s2:"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" s2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("swap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Student")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Student")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Student")]),s._v(" temp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\tx "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\ty "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" temp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"x:"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"y:"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n结果：\nx"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("小李\ny"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("小张\ns1"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("小张\ns2"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("小李\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br")])]),t("p",[s._v("解析：")]),s._v(" "),t("ul",[t("li",[s._v("交换前：\n"),t("img",{attrs:{src:"https://gitee.com/li-wen-kai/picgo/raw/master/img/20210710185224.jpeg",alt:"交换前"}})]),s._v(" "),t("li",[s._v("交换后：\n"),t("img",{attrs:{src:"https://gitee.com/li-wen-kai/picgo/raw/master/img/20210710185429.jpeg",alt:"交换后"}})])]),s._v(" "),t("blockquote",[t("p",[s._v("结论：通过上面两张图可以很清晰的看出： 方法并没有改变存储在变量 s1 和 s2 中的对象引用。swap 方法的参数 x 和 y 被初始化为两个对象引用的拷贝，这个方法交换的是这两个拷贝")])])]),t("blockquote",[t("p",[s._v("总结\nJava 程序设计语言对对象采用的不是引用调用，实际上，对象引用是按值传递的。\n下面再总结一下 Java 中方法参数的使用情况：")])]),s._v(" "),t("ul",[t("li",[s._v("一个方法不能修改一个基本数据类型的参数（即数值型或布尔型）。")]),s._v(" "),t("li",[s._v("一个方法可以改变一个对象参数的状态。")]),s._v(" "),t("li",[s._v("一个方法不能让对象参数引用一个新的对象。")])]),s._v(" "),t("h3",{attrs:{id:"重载和重写的区别？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重载和重写的区别？"}},[s._v("#")]),s._v(" 重载和重写的区别？")]),s._v(" "),t("blockquote",[t("p",[s._v("重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理\n重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法")])]),s._v(" "),t("ol",[t("li",[s._v("重载")])]),s._v(" "),t("ul",[t("li",[s._v("发生在同一个类中（或者父类和子类之间），方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同")]),s._v(" "),t("li",[s._v("综上：重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。")])]),s._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[s._v("重写")])]),s._v(" "),t("ul",[t("li",[s._v("发生在运行期，是子类对父类的允许访问的方法的实现过程的重新编写。")]),s._v(" "),t("li",[s._v("1）返回值、类型、参数列表必须相同，抛出异常的范围小于等于父类，访问权限修饰符大于等于父类。")]),s._v(" "),t("li",[s._v("2）如果父类方法访问权限修饰符为private/final/static,则子类不能重写，被static修饰的方法能够被再次声明。")]),s._v(" "),t("li",[s._v("3）构造方法无法被重写\n| 区别点     | 重载方法 | 重写方法                                                     |\n| ---------- | -------- | ------------------------------------------------------------ |\n| 发生范围   | 同一个类 | 子类                                                         |\n| 参数列表   | 必须修改 | 一定不能修改                                                 |\n| 返回类型   | 可修改   | 子类方法返回值类型应比父类方法返回值类型更小或相等           |\n| 异常       | 可修改   | 子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等； |\n| 访问修饰符 | 可修改   | 一定不能做更严格的限制（可以降低限制）                       |\n| 发生阶段   | 编译期   | 运行期                                                       |\n"),t("strong",[s._v('方法重写要遵循"两同两小一大"')])]),s._v(" "),t("li",[s._v("“两同”即方法名相同、形参列表相同；")]),s._v(" "),t("li",[s._v("“两小”指的是子类方法返回值类型应比父类方法返回值类型更小或相等，子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等；")]),s._v(" "),t("li",[s._v("“一大”指的是子类方法的访问权限应比父类方法的访问权限更大或相等。")])]),s._v(" "),t("blockquote",[t("p",[s._v("关于重写的返回值类型这里需要额外多说明一下，上面的表述不太清晰准确：\n如果方法的返回类型是 void 和基本数据类型，则返回值重写时不可修改。但是如果方法的返回值是引用类型，重写时是可以返回该引用类型的子类的。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('public class Hero {\n    public String name() {\n        return "超级英雄";\n    }\n}\npublic class SuperMan extends Hero{\n    @Override\n    public String name() {\n        return "超人";\n    }\n    public Hero hero() {\n        return new Hero();\n    }\n}\n\npublic class SuperSuperMan extends SuperMan {\n    public String name() {\n        return "超级超级英雄";\n    }\n\n    @Override\n    public SuperMan hero() {\n        return new SuperMan();\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br")])]),t("p",[s._v("深拷贝vs浅拷贝")]),s._v(" "),t("ol",[t("li",[s._v("浅拷贝：对基本数据类型进行值传递，对引用数据类型进行引用传递般的拷贝，此为浅拷贝")]),s._v(" "),t("li",[s._v("深拷贝：对基本数据类型进行值传递，对引用数据类型，创建一个新的对象，并复制其内容，此为深拷贝。\n"),t("img",{attrs:{src:"https://gitee.com/li-wen-kai/picgo/raw/master/img/20210710190629.jpeg",alt:"深拷贝vs浅拷贝"}})])]),s._v(" "),t("h2",{attrs:{id:"java面向对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java面向对象"}},[s._v("#")]),s._v(" java面向对象")]),s._v(" "),t("h3",{attrs:{id:"面向对象和面向过程的区别？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面向对象和面向过程的区别？"}},[s._v("#")]),s._v(" 面向对象和面向过程的区别？")]),s._v(" "),t("blockquote",[t("p",[s._v("面向过程 ：面向过程性能比面向对象高。\n因为类调用时需要实例化，开销比较大，比较消耗资源，所以当性能是最重要的考量因素的时候，比如单片机、嵌入式开发、Linux/Unix 等一般采用面向过程开发。但是，面向过程没有面向对象易维护、易复用、易扩展。\n面向对象 ：面向对象易维护、易复用、易扩展。 因为面向对象有封装、继承、多态性的特性，所以可以设计出低耦合的系统，使系统更加灵活、更加易于维护。\n面向对象性能比面向过程低。")])]),s._v(" "),t("h3",{attrs:{id:"成员变量与局部变量的区别有哪些？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#成员变量与局部变量的区别有哪些？"}},[s._v("#")]),s._v(" 成员变量与局部变量的区别有哪些？")]),s._v(" "),t("ol",[t("li",[s._v("语法")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("成员变量属于类，局部变量是在代码块中或方法中定义的变量或是方法的参数；\n成员变量可以被 public,private,static 等修饰符所修饰，而局部变量不能被访问控制修饰符及 static 所修饰；\n但是，成员变量和局部变量都能被 final 所修饰。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("存储方式")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("成员变量是使用 static 修饰的，那么这个成员变量是属于类的，\n如果没有使用 static 修饰，这个成员变量是属于实例的。\n而对象存在于堆内存，局部变量则存在于栈内存。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("ol",{attrs:{start:"3"}},[t("li",[s._v("生存时间")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("成员变量是对象的一部分，它随着对象的创建而存在\n局部变量随着方法的调用而自动消失。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("ol",{attrs:{start:"4"}},[t("li",[s._v("默认值")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("成员变量如果没有被赋初，则会自动以类型的默认值而赋值（一种情况例外:被 final 修饰的成员变量也必须显式地赋值）\n局部变量则不会自动赋值\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h3",{attrs:{id:"创建一个对象用什么运算符-对象实体与对象引用有何不同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建一个对象用什么运算符-对象实体与对象引用有何不同"}},[s._v("#")]),s._v(" 创建一个对象用什么运算符?对象实体与对象引用有何不同?")]),s._v(" "),t("p",[s._v("new运算符，new创建对象实例（对象实例在堆内存中），对象引用指向对象实例（对象引用存放在栈内存中）。\n一个对象引用可以指向 0 个或 1 个对象（一根绳子可以不系气球，也可以系一个气球）;一个对象可以有 n 个引用指向它（可以用 n 条绳子系住一个气球）。")]),s._v(" "),t("h3",{attrs:{id:"对象的相等与指向他们的引用相等-两者有什么不同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象的相等与指向他们的引用相等-两者有什么不同"}},[s._v("#")]),s._v(" 对象的相等与指向他们的引用相等,两者有什么不同?")]),s._v(" "),t("p",[s._v("对象的相等，比的是内存中存放的内容是否相等。而引用相等，比较的是他们指向的内存地址是否相等。")]),s._v(" "),t("h3",{attrs:{id:"一个类的构造方法的作用是什么-若一个类没有声明构造方法，该程序能正确执行吗-为什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一个类的构造方法的作用是什么-若一个类没有声明构造方法，该程序能正确执行吗-为什么"}},[s._v("#")]),s._v(" 一个类的构造方法的作用是什么? 若一个类没有声明构造方法，该程序能正确执行吗? 为什么?")]),s._v(" "),t("ul",[t("li",[s._v("构造方法作用：初始化类的对象。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("如果一个类没有声明构造方法，也可以执行！因为一个类即使没有声明构造方法也会有默认的不带参数的构造方法。\n如果我们自己添加了类的构造方法（无论是否有参），Java 就不会再添加默认的无参数的构造方法了，\n这时候，就不能直接 new 一个对象而不传递参数了，所以我们一直在不知不觉地使用构造方法，这也是为什么我们在创建对象的时候后面要加一个括号（因为要调用无参的构造方法）。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"构造方法有哪些特点？是否可被-override"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构造方法有哪些特点？是否可被-override"}},[s._v("#")]),s._v(" 构造方法有哪些特点？是否可被 override?")]),s._v(" "),t("p",[s._v("特点：")]),s._v(" "),t("ol",[t("li",[s._v("名字与类名相同")]),s._v(" "),t("li",[s._v("没有返回值，但不能用void声明函数")]),s._v(" "),t("li",[s._v("生成类的对象时自动执行，无需调用")])]),s._v(" "),t("blockquote",[t("p",[s._v("构造方法不能被override（重写）,但是可以overload（重载）,所以你可以看到一个类中有多个构造函数的情况。")])]),s._v(" "),t("h3",{attrs:{id:"面向对象三大特征"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面向对象三大特征"}},[s._v("#")]),s._v(" 面向对象三大特征")]),s._v(" "),t("h4",{attrs:{id:"封装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#封装"}},[s._v("#")]),s._v(" 封装")]),s._v(" "),t("blockquote",[t("p",[s._v("把一个对象的状态信息（也就是属性）隐藏在对象内部，不允许外部对象直接访问对象的内部信息。但是可以提供一些可以被外界访问的方法(get和set方法)来操作属性。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("public class Student {\n    private int id;//id属性私有化\n    private String name;//name属性私有化\n    //获取id的方法\n    public int getId() {\n        return id;\n    }\n    //设置id的方法\n    public void setId(int id) {\n        this.id = id;\n    }\n    //获取name的方法\n    public String getName() {\n        return name;\n    }\n    //设置name的方法\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])]),t("h4",{attrs:{id:"继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[s._v("#")]),s._v(" 继承")]),s._v(" "),t("blockquote",[t("p",[s._v("继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。")])]),s._v(" "),t("ul",[t("li",[s._v("使用继承的好处\n通过使用继承，可以快速地创建新的类，可以提高代码的重用，程序的可维护性，节省大量创建新类的时间 ，提高我们的开发效率。")]),s._v(" "),t("li",[s._v("注意点\n"),t("ol",[t("li",[s._v("子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，只是拥有。")]),s._v(" "),t("li",[s._v("子类可以拥有自己属性和方法，即子类可以对父类进行扩展。")]),s._v(" "),t("li",[s._v("子类可以用自己的方式实现父类的方法。（重写）")])])])]),s._v(" "),t("h4",{attrs:{id:"多态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[s._v("#")]),s._v(" 多态")]),s._v(" "),t("blockquote",[t("p",[s._v("多态，表示一个对象具有多种的状态（具体表现为父类的引用指向子类的实例）。")])]),s._v(" "),t("ul",[t("li",[s._v("特点:\n"),t("ol",[t("li",[s._v("对象类型和引用类型之间具有继承（类）/实现（接口）的关系；")]),s._v(" "),t("li",[s._v("引用类型变量发出的方法调用的到底是哪个类中的方法，必须在程序运行期间才能确定；")]),s._v(" "),t("li",[s._v("多态不能调用“只在子类存在但在父类不存在”的方法；")]),s._v(" "),t("li",[s._v("如果子类重写了父类的方法，真正执行的是子类覆盖的方法，如果子类没有覆盖父类的方法，执行的是父类的方法。")])])])]),s._v(" "),t("h3",{attrs:{id:"string-stringbuffer-和-stringbuilder-的区别是什么-string-为什么是不可变的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-stringbuffer-和-stringbuilder-的区别是什么-string-为什么是不可变的"}},[s._v("#")]),s._v(" String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?")]),s._v(" "),t("p",[t("strong",[s._v("可变性")]),s._v("\nString 类中使用 final 关键字修饰字符数组来保存字符串，private final char value[]，所以String 对象是不可变的。")]),s._v(" "),t("blockquote",[t("p",[s._v("补充：在 Java 9 之后，String 、StringBuilder 与 StringBuffer 的实现改用 byte 数组存储字符串 private final byte[] value\nStringBuilder 与 StringBuffer 都继承自 AbstractStringBuilder 类，在 AbstractStringBuilder 中也是使用字符数组保存字符串char[]value 但是没有用 final 关键字修饰，所以这两种对象都是可变的。\nStringBuilder 与 StringBuffer 的构造方法都是调用父类构造方法也就是AbstractStringBuilder 实现的\nAbstractStringBuilder.java")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AbstractStringBuilder")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Appendable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CharSequence")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * The value is used for character storage.\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * The count is the number of characters used.\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AbstractStringBuilder")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" capacity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("capacity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[t("strong",[s._v("线程安全性")])]),s._v(" "),t("ol",[t("li",[s._v("String 中的对象是不可变的，也就可以理解为常量，线程安全。")]),s._v(" "),t("li",[s._v("StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。")]),s._v(" "),t("li",[s._v("StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。")])]),s._v(" "),t("blockquote",[t("p",[s._v("AbstractStringBuilder 是 StringBuilder 与 StringBuffer 的公共父类，定义了一些字符串的基本操作，如 expandCapacity、append、insert、indexOf 等公共方法。")])]),s._v(" "),t("p",[t("strong",[s._v("性能")])]),s._v(" "),t("ol",[t("li",[s._v("每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象。")]),s._v(" "),t("li",[s._v("StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。")]),s._v(" "),t("li",[s._v("相同情况下StringBuilder相比StringBuffer能获得10%的性能提升，但却要冒多线程不安全的风险。")])]),s._v(" "),t("p",[t("strong",[s._v("总结")])]),s._v(" "),t("ol",[t("li",[s._v("操作少量的数据: 适用 String")]),s._v(" "),t("li",[s._v("单线程操作字符串缓冲区下操作大量数据: 适用 StringBuilder")]),s._v(" "),t("li",[s._v("多线程操作字符串缓冲区下操作大量数据: 适用 StringBuffer")])]),s._v(" "),t("h3",{attrs:{id:"object-类的常见方法总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-类的常见方法总结"}},[s._v("#")]),s._v(" Object 类的常见方法总结")]),s._v(" "),t("blockquote",[t("p",[s._v("Object 类是一个特殊的类，是所有类的父类。它主要提供了以下11个方法：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("public final native Class<?> getClass()//native方法，用于返回当前运行时对象的Class对象，使用了final关键字修饰，故不允许子类重写。\npublic native int hashCode() //native方法，用于返回对象的哈希码，主要使用在哈希表中，比如JDK中的HashMap。\npublic boolean equals(Object obj)//用于比较2个对象的内存地址是否相等，String类对该方法进行了重写用户比较字符串的值是否相等。\nprotected native Object clone() throws CloneNotSupportedException//naitive方法，用于创建并返回当前对象的一份拷贝。一般情况下，对于任何对象 x，表达式 x.clone() != x 为true，x.clone().getClass() == x.getClass() 为true。Object本身没有实现Cloneable接口，所以不重写clone方法并且进行调用的话会发生CloneNotSupportedException异常。\npublic String toString()//返回类的名字@实例的哈希码的16进制的字符串。建议Object所有的子类都重写这个方法。\npublic final native void notify()//native方法，并且不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。\npublic final native void notifyAll()//native方法，并且不能重写。跟notify一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。\npublic final native void wait(long timeout) throws InterruptedException//native方法，并且不能重写。暂停线程的执行。注意：sleep方法没有释放锁，而wait方法释放了锁 。timeout是等待时间。\npublic final void wait(long timeout, int nanos) throws InterruptedException//多了nanos参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上nanos毫秒。\npublic final void wait() throws InterruptedException//跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间这个概念\nprotected void finalize() throws Throwable { }//实例被垃圾回收器回收的时候触发的操作\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("h2",{attrs:{id:"反射"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反射"}},[s._v("#")]),s._v(" 反射")]),s._v(" "),t("h3",{attrs:{id:"何为反射？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#何为反射？"}},[s._v("#")]),s._v(" 何为反射？")]),s._v(" "),t("blockquote",[t("p",[s._v("通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。")])]),s._v(" "),t("h3",{attrs:{id:"反射机制优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反射机制优缺点"}},[s._v("#")]),s._v(" 反射机制优缺点")]),s._v(" "),t("ul",[t("li",[s._v("优点 ： 可以让咱们的代码更加灵活、为各种框架提供开箱即用的功能提供了便利")]),s._v(" "),t("li",[s._v("缺点 ：让我们在运行时有了分析操作类的能力，这同样也增加了安全问题。比如可以无视泛型参数的安全检查（泛型参数的安全检查发生在编译时）。另外，反射的性能也要稍差点，不过，对于框架来说实际是影响不大的。")])]),s._v(" "),t("h3",{attrs:{id:"反射的应用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反射的应用场景"}},[s._v("#")]),s._v(" 反射的应用场景")]),s._v(" "),t("ul",[t("li",[s._v("Spring/Spring Boot、MyBatis 等等框架中都大量使用了反射机制。")]),s._v(" "),t("li",[s._v("这些框架中也大量使用了动态代理，而动态代理的实现也依赖反射。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('通过 JDK 实现动态代理的示例代码，其中就使用了反射类 Method 来调用指定的方法。\npublic class DebugInvocationHandler implements InvocationHandler {\n    /**\n     * 代理类中的真实对象\n     */\n    private final Object target;\n\n    public DebugInvocationHandler(Object target) {\n        this.target = target;\n    }\n    public Object invoke(Object proxy, Method method, Object[] args) throws InvocationTargetException, IllegalAccessException {\n        System.out.println("before method " + method.getName());\n        Object result = method.invoke(target, args);\n        System.out.println("after method " + method.getName());\n        return result;\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])]),t("ul",[t("li",[s._v("注解 的实现也用到了反射。")])]),s._v(" "),t("blockquote",[t("p",[s._v("为什么你使用 Spring 的时候 ，一个@Component注解就声明了一个类为 Spring Bean 呢？为什么你通过一个 @Value注解就读取到配置文件中的值呢？究竟是怎么起作用的呢？\n这些都是因为你可以基于反射分析类，然后获取到类/属性/方法/方法的参数上的注解。你获取到注解之后，就可以做进一步的处理。")])]),s._v(" "),t("h2",{attrs:{id:"异常"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异常"}},[s._v("#")]),s._v(" 异常")]),s._v(" "),t("h3",{attrs:{id:"java-异常类层次结构图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-异常类层次结构图"}},[s._v("#")]),s._v(" Java 异常类层次结构图")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/li-wen-kai/picgo/raw/master/img/20210712130933.png",alt:"异常结构图"}})]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v(" * java.lang.Throwable\n * \t\t|-----java.lang.Error:一般不编写针对性的代码进行处理。\n * \t\t|-----java.lang.Exception:可以进行异常的处理\n * \t\t\t|------编译时异常(checked)\n * \t\t\t\t\t|-----IOException\n * \t\t\t\t\t\t|-----FileNotFoundException\n * \t\t\t\t\t|-----ClassNotFoundException\n * \t\t\t|------运行时异常(unchecked,RuntimeException)\n * \t\t\t\t\t|-----NullPointerException\n * \t\t\t\t\t|-----ArrayIndexOutOfBoundsException\n * \t\t\t\t\t|-----ClassCastException\n * \t\t\t\t\t|-----NumberFormatException\n * \t\t\t\t\t|-----InputMismatchException\n * \t\t\t\t\t|-----ArithmeticException\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://gitee.com/li-wen-kai/picgo/raw/master/img/20210712131036.png",alt:"编译时异常和运行时异常"}})]),s._v(" "),t("ul",[t("li",[s._v("编译时异常：执行javac.exe命名时，可能出现的异常")]),s._v(" "),t("li",[s._v("运行时异常：执行java.exe命名时，出现的异常")])]),s._v(" "),t("blockquote",[t("p",[s._v("在 Java 中，所有的异常都有一个共同的祖先 java.lang 包中的 Throwable 类。Throwable 类有两个重要的子类 Exception（异常）和 Error（错误）。Exception 能被程序本身处理(try-catch)， Error 是无法处理的(只能尽量避免)。\nException 和 Error 二者都是 Java 异常处理的重要子类，各自都包含大量子类。")])]),s._v(" "),t("ul",[t("li",[s._v("Exception :程序本身可以处理的异常，可以通过 catch 来进行捕获。Exception 又可以分为 受检查异常(必须处理) 和 不受检查异常(可以不处理)。")]),s._v(" "),t("li",[s._v("Error ：Error 属于程序无法处理的错误 ，我们没办法通过 catch 来进行捕获 。")]),s._v(" "),t("li",[s._v("例如，Java 虚拟机运行错误（Virtual MachineError）、虚拟机内存不够错误(OutOfMemoryError)、类定义错误（NoClassDefFoundError）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。")])]),s._v(" "),t("ol",[t("li",[s._v("受检查异常\nJava 代码在编译过程中，如果受检查异常没有被 catch/throw 处理的话，就没办法通过编译 。比如下面这段 IO 操作的代码。\n"),t("img",{attrs:{src:"https://gitee.com/li-wen-kai/picgo/raw/master/img/20210712132825.png",alt:"IO操作异常"}})])]),s._v(" "),t("blockquote",[t("p",[s._v("除了RuntimeException及其子类以外，其他的Exception类及其子类都属于受检查异常 。常见的受检查异常有： IO 相关的异常、ClassNotFoundException 、SQLException...。")])]),s._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[s._v("不受检查异常")])]),s._v(" "),t("blockquote",[t("p",[s._v("Java 代码在编译过程中 ，我们即使不处理不受检查异常也可以正常通过编译。\nRuntimeException 及其子类都统称为非受检查异常，例如：NullPointerException、NumberFormatException（字符串转换为数字）、ArrayIndexOutOfBoundsException（数组越界）、ClassCastException（类型转换错误）、ArithmeticException（算术错误）等。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('//******************以下是运行时异常***************************\n\t//ArithmeticException\n\t@Test\n\tpublic void test6(){\n\t\tint a = 10;\n\t\tint b = 0;\n\t\tSystem.out.println(a / b);\n\t}\n\t//InputMismatchException 输入数据类型不匹配异常\n    //比如你输入的是abc,它用nextInt来接收，就会报错\n\t@Test\n\tpublic void test5(){\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint score = scanner.nextInt();\n\t\tSystem.out.println(score);\n\t\tscanner.close();\n\t}\n\t//NumberFormatException\n\t@Test\n\tpublic void test4(){\n\t\tString str = "123";\n\t\tstr = "abc";\n\t\tint num = Integer.parseInt(str);\n\t}\n\t//ClassCastException\n\t@Test\n\tpublic void test3(){\n\t\tObject obj = new Date();\n\t\tString str = (String)obj;\n\t}\n\t//IndexOutOfBoundsException\n\t@Test\n\tpublic void test2(){\n\t\t//ArrayIndexOutOfBoundsException\n//\t\tint[] arr = new int[10];\n//\t\tSystem.out.println(arr[10]);\n\t\t//StringIndexOutOfBoundsException\n\t\tString str = "abc";\n\t\tSystem.out.println(str.charAt(3));\n\t}\n\t//NullPointerException\n\t@Test\n\tpublic void test1(){\n\t\t\n//\t\tint[] arr = null;\n//\t\tSystem.out.println(arr[3]);\n\t\t\n\t\tString str = "abc";\n\t\tstr = null;\n\t\tSystem.out.println(str.charAt(0));\n\t\t\n\t}\n\t//******************以下是编译时异常***************************\n\t@Test\n\tpublic void test7(){\n//\t\tFile file = new File("hello.txt");\n//\t\tFileInputStream fis = new FileInputStream(file);\n//\t\t\n//\t\tint data = fis.read();\n//\t\twhile(data != -1){\n//\t\t\tSystem.out.print((char)data);\n//\t\t\tdata = fis.read();\n//\t\t}\n//\t\t\n//\t\tfis.close();\n\t}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br")])]),t("h3",{attrs:{id:"throwable-类常用方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#throwable-类常用方法"}},[s._v("#")]),s._v(" Throwable 类常用方法")]),s._v(" "),t("ul",[t("li",[s._v("public string getMessage():返回异常发生时的简要描述")]),s._v(" "),t("li",[s._v("public string toString():返回异常发生时的详细信息")]),s._v(" "),t("li",[s._v("public string getLocalizedMessage():返回异常对象的本地化信息。使用 Throwable 的子类覆盖这个方法，可以生成本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与 getMessage（）返回的结果相同")]),s._v(" "),t("li",[s._v("public void printStackTrace():在控制台上打印 Throwable 对象封装的异常信息")])]),s._v(" "),t("h3",{attrs:{id:"try-catch-finally"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#try-catch-finally"}},[s._v("#")]),s._v(" try-catch-finally")]),s._v(" "),t("ul",[t("li",[s._v("try块： 用于捕获异常。其后可接零个或多个 catch 块，如果没有 catch 块，则必须跟一个 finally 块。")]),s._v(" "),t("li",[s._v("catch块： 用于处理 try 捕获到的异常。")]),s._v(" "),t("li",[s._v("finally 块： 无论是否捕获或处理异常，finally 块里的语句都会被执行。当在 try 块或 catch 块中遇到 return 语句时，finally 语句块将在方法返回之前被执行。")])]),s._v(" "),t("h4",{attrs:{id:"在以下-3-种特殊情况下，finally-块不会被执行："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在以下-3-种特殊情况下，finally-块不会被执行："}},[s._v("#")]),s._v(" 在以下 3 种特殊情况下，finally 块不会被执行：")]),s._v(" "),t("ul",[t("li",[s._v("在 try 或 finally块中用了 System.exit(int)退出程序。但是，如果 System.exit(int) 在异常语句之后，finally 还是会被执行")]),s._v(" "),t("li",[s._v("程序所在的线程死亡。")]),s._v(" "),t("li",[s._v("关闭 CPU。\n"),t("strong",[s._v("注意：")]),s._v(" 当 try 语句和 finally 语句中都有 return 语句时，在方法返回之前，finally 语句的内容将被执行，并且 finally 语句的返回值将会覆盖原始的返回值。如下：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("public class Test {\n    public static int f(int value) {\n        try {\n            return value * value;\n        } finally {\n            if (value == 2) {\n                return 0;\n            }\n        }\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("如果调用 f(2)，返回值将是 0，因为 finally 语句的返回值覆盖了 try 语句块的返回值。")]),s._v(" "),t("h4",{attrs:{id:"使用-try-with-resources-来代替try-catch-finally"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-try-with-resources-来代替try-catch-finally"}},[s._v("#")]),s._v(" 使用 try-with-resources 来代替try-catch-finally")]),s._v(" "),t("ol",[t("li",[s._v("适用范围（资源的定义）： 任何实现 java.lang.AutoCloseable或者 java.io.Closeable 的对象")]),s._v(" "),t("li",[s._v("关闭资源和 finally 块的执行顺序： 在 try-with-resources 语句中，任何 catch 或 finally 块在声明的资源关闭后运行")])]),s._v(" "),t("blockquote",[t("p",[s._v("面对必须要关闭的资源，我们总是应该优先使用 try-with-resources 而不是try-finally。随之产生的代码更简短，更清晰，产生的异常对我们也更有用。try-with-resources语句让我们更容易编写必须要关闭的资源的代码，若采用try-finally则几乎做不到这点。\nJava 中类似于InputStream、OutputStream 、Scanner 、PrintWriter等的资源都需要我们调用close()方法来手动关闭，一般情况下我们都是通过try-catch-finally语句来实现这个需求，如下：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v(' //读取文本文件的内容\n        Scanner scanner = null;\n        try {\n            scanner = new Scanner(new File("D://read.txt"));\n            while (scanner.hasNext()) {\n                System.out.println(scanner.nextLine());\n            }\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } finally {\n            if (scanner != null) {\n                scanner.close();\n            }\n        }\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("使用 Java 7 之后的 try-with-resources 语句改造上面的代码:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('try (Scanner scanner = new Scanner(new File("test.txt"))) {\n    while (scanner.hasNext()) {\n        System.out.println(scanner.nextLine());\n    }\n} catch (FileNotFoundException fnfe) {\n    fnfe.printStackTrace();\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h2",{attrs:{id:"i-o流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#i-o流"}},[s._v("#")]),s._v(" I/O流")]),s._v(" "),t("h3",{attrs:{id:"什么是序列化-什么是反序列化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是序列化-什么是反序列化"}},[s._v("#")]),s._v(" 什么是序列化?什么是反序列化?")]),s._v(" "),t("blockquote",[t("p",[s._v("如果我们需要持久化 Java 对象比如将 Java 对象保存在文件中，或者在网络传输 Java 对象，这些场景都需要用到序列化。\n简单来说：")])]),s._v(" "),t("ul",[t("li",[s._v("序列化： 将数据结构或对象转换成二进制字节流的过程")]),s._v(" "),t("li",[s._v("反序列化：将在序列化过程中所生成的二进制字节流的过程转换成数据结构或者对象的过程")])]),s._v(" "),t("blockquote",[t("p",[s._v("对于 Java 这种面向对象编程语言来说，我们序列化的都是对象（Object）也就是实例化后的类(Class)，但是在 C++这种半面向对象的语言中，struct(结构体)定义的是数据结构类型，而 class 对应的是对象类型。\n维基百科\n序列化（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换成可取用格式（例如存成文件，存于缓冲，或经由网络中发送），\n以留待后续在相同或另一台计算机环境中，能恢复原先状态的过程。依照序列化格式重新获取字节的结果时，可以利用它来产生与原始对象相同语义的副本。\n对于许多对象，像是使用大量引用的复杂对象，这种序列化重建的过程并不容易。\n面向对象中的对象序列化，并不概括之前原始对象所关系的函数。这种过程也称为对象编组（marshalling）。\n从一系列字节提取数据结构的反向操作，是反序列化（也称为解编组、deserialization、unmarshalling）。\n综上：序列化的主要目的是通过网络传输对象或者说是将对象存储到文件系统、数据库、内存中。\n"),t("img",{attrs:{src:"https://gitee.com/li-wen-kai/picgo/raw/master/img/20210712164215.png",alt:"序列化"}})])]),s._v(" "),t("h3",{attrs:{id:"java-序列化中如果有些字段不想进行序列化，怎么办？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-序列化中如果有些字段不想进行序列化，怎么办？"}},[s._v("#")]),s._v(" Java 序列化中如果有些字段不想进行序列化，怎么办？")]),s._v(" "),t("p",[s._v("对于不想进行序列化的变量，使用transient关键字进行修饰")]),s._v(" "),t("ul",[t("li",[s._v("作用")]),s._v(" "),t("li",[s._v("transient关键字的作用是：阻止实例中那些用此关键字修饰的变量序列化；当对象被反序列化时，被transient修饰的变量值不会被持久化和恢复。")]),s._v(" "),t("li",[s._v("transient只能修饰变量，不能修饰类和方法")])]),s._v(" "),t("h3",{attrs:{id:"获取用键盘输入常用的两种方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取用键盘输入常用的两种方法"}},[s._v("#")]),s._v(" 获取用键盘输入常用的两种方法")]),s._v(" "),t("p",[s._v("1.Scanner")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Scanner input = new Scanner(System.in);\nString s  = input.nextLine();\ninput.close();\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("2.BufferedReader")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\nString s = input.readLine();\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h3",{attrs:{id:"java-中-io-流分为几种"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-中-io-流分为几种"}},[s._v("#")]),s._v(" Java 中 IO 流分为几种?")]),s._v(" "),t("ul",[t("li",[s._v("按流向分，\n输入流和输出流")]),s._v(" "),t("li",[s._v("按处理数据不同类型分，")])]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("字节流和字符流")]),t("ul",[t("li",[s._v("字节流：二进制，可以处理一切文件，包括：纯文本、doc、音频、视频等。")]),s._v(" "),t("li",[s._v("字符流：文本文件，只能处理纯文本。")])])]),t("ul",[t("li",[s._v("按功能不同分:")])]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("节点流和处理流")]),t("ul",[t("li",[s._v("节点流：包裹源头。")]),s._v(" "),t("li",[s._v("处理流：增强功能，提高性能")])])]),t("blockquote",[t("p",[s._v("Java Io 流共涉及 40 多个类，这些类看上去很杂乱，但实际上很有规则，而且彼此之间存在非常紧密的联系， Java I0 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。")])]),s._v(" "),t("ul",[t("li",[s._v("InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。")]),s._v(" "),t("li",[s._v("OutputStream/Writer:  所有输出流的基类，前者是字节输出流，后者是字符输出流。\n按操作方式分类结构图：\n"),t("img",{attrs:{src:"https://gitee.com/li-wen-kai/picgo/raw/master/img/20210712170452.png",alt:"操作方式分类"}}),s._v("\n按操作对象分类结构图：\n"),t("img",{attrs:{src:"https://gitee.com/li-wen-kai/picgo/raw/master/img/20210712170803.png",alt:"操作对象分类"}})])]),s._v(" "),t("h3",{attrs:{id:"既然有了字节流-为什么还要有字符流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#既然有了字节流-为什么还要有字符流"}},[s._v("#")]),s._v(" 既然有了字节流,为什么还要有字符流?")]),s._v(" "),t("p",[s._v("本质：不管是文件读写还是网络发送接收，信息的最小存储单元都是字节，那为什么 I/O 流操作要分为字节流操作和字符流操作呢？")]),s._v(" "),t("blockquote",[t("p",[s._v("字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还算是非常耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。所以， I/O 流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。\n如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);